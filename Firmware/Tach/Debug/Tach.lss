
Tach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00001a78  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000f2  008000f2  00001b9e  2**0
                  ALLOC
  3 .stab         00001128  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000032e  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  00002ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000054d  00000000  00000000  0000315e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002567  00000000  00000000  000036ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d34  00000000  00000000  00005c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002349  00000000  00000000  00006946  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000310  00000000  00000000  00008c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a08  00000000  00000000  00008fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000200b  00000000  00000000  000099a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000002b3  00000000  00000000  0000b9b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000bc66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 07 	call	0xf2c	; 0xf2c <main>
      8a:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <display_set_backlight>:
 *      PUBLIC FUNCTIONS                    *
 *******************************************/
void display_set_backlight( uint8_t percent )
{
	/* Configure pin just in case */
	DISPLAY_BACKLIGHT_DDR |= (1 << DISPLAY_BACKLIGHT_PIN);
      92:	8d 9a       	sbi	0x11, 5	; 17
	
	if (0 == percent)
      94:	88 23       	and	r24, r24
      96:	11 f4       	brne	.+4      	; 0x9c <display_set_backlight+0xa>
	{
		/* Turn PWM off and set pin to 0 */
		DISPLAY_BACKLIGHT_PORT &= ~(1 << DISPLAY_BACKLIGHT_PIN);
      98:	95 98       	cbi	0x12, 5	; 18
      9a:	08 95       	ret
		
	} else if ( 100 <= percent )
      9c:	84 36       	cpi	r24, 0x64	; 100
      9e:	08 f0       	brcs	.+2      	; 0xa2 <display_set_backlight+0x10>
	{
		/* Turn PWM off and set pin to 1 */
		DISPLAY_BACKLIGHT_PORT |= (1 << DISPLAY_BACKLIGHT_PIN);
      a0:	95 9a       	sbi	0x12, 5	; 18
      a2:	08 95       	ret

000000a4 <displaySendCommand>:
/********************************************
 *      LOCAL FUNCTIONS                     *
 *******************************************/

void displaySendCommand(uint8_t command, double delay_in_us)
{
      a4:	1f 93       	push	r17
      a6:	18 2f       	mov	r17, r24
      a8:	cb 01       	movw	r24, r22
      aa:	ba 01       	movw	r22, r20
	uint8_t buf = 0;
	DISPLAY_CONFIG_PINS_PORT  &= ~(1 << DISPLAY_CONFIG_PIN_RS ); // 0 - command, 1 - data 
      ac:	af 98       	cbi	0x15, 7	; 21
	{
		/* No need to invert data in the port */
		// TODO: implement		
	} else
	{			
		buf = (command & 0xF0) >> 4;
      ae:	21 2f       	mov	r18, r17
      b0:	22 95       	swap	r18
      b2:	2f 70       	andi	r18, 0x0F	; 15
		DISPLAY_DATA_PINS_PORT = ((((buf & 0x1) << 3) | ((buf & 0x2) << 1) | ((buf & 0x4) >> 1) | ((buf & 0x8) >> 3)) << DISPLAY_DATA_PINS_SHIFT) | (DISPLAY_DATA_PINS_PORT & (~DISPLAY_DATA_PINS_MASK));		
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	a5 b3       	in	r26, 0x15	; 21
      b8:	f9 01       	movw	r30, r18
      ba:	e2 70       	andi	r30, 0x02	; 2
      bc:	f0 70       	andi	r31, 0x00	; 0
      be:	ee 0f       	add	r30, r30
      c0:	ff 1f       	adc	r31, r31
      c2:	a9 01       	movw	r20, r18
      c4:	41 70       	andi	r20, 0x01	; 1
      c6:	50 70       	andi	r21, 0x00	; 0
      c8:	44 0f       	add	r20, r20
      ca:	55 1f       	adc	r21, r21
      cc:	44 0f       	add	r20, r20
      ce:	55 1f       	adc	r21, r21
      d0:	44 0f       	add	r20, r20
      d2:	55 1f       	adc	r21, r21
      d4:	e4 2b       	or	r30, r20
      d6:	f5 2b       	or	r31, r21
      d8:	a9 01       	movw	r20, r18
      da:	44 70       	andi	r20, 0x04	; 4
      dc:	50 70       	andi	r21, 0x00	; 0
      de:	55 95       	asr	r21
      e0:	47 95       	ror	r20
      e2:	e4 2b       	or	r30, r20
      e4:	f5 2b       	or	r31, r21
      e6:	a9 01       	movw	r20, r18
      e8:	56 95       	lsr	r21
      ea:	47 95       	ror	r20
      ec:	56 95       	lsr	r21
      ee:	47 95       	ror	r20
      f0:	56 95       	lsr	r21
      f2:	47 95       	ror	r20
      f4:	9f 01       	movw	r18, r30
      f6:	24 2b       	or	r18, r20
      f8:	35 2b       	or	r19, r21
      fa:	22 0f       	add	r18, r18
      fc:	33 1f       	adc	r19, r19
      fe:	22 0f       	add	r18, r18
     100:	33 1f       	adc	r19, r19
     102:	a3 7c       	andi	r26, 0xC3	; 195
     104:	2a 2b       	or	r18, r26
     106:	25 bb       	out	0x15, r18	; 21
	}

	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
     108:	ae 9a       	sbi	0x15, 6	; 21
	delay_us(delay_in_us);
     10a:	0e 94 90 08 	call	0x1120	; 0x1120 <__fixunssfsi>

  } 
} 

static inline void delay_us(uint16_t count) { 
  while(count--) { 
     10e:	61 15       	cp	r22, r1
     110:	71 05       	cpc	r23, r1
     112:	39 f0       	breq	.+14     	; 0x122 <displaySendCommand+0x7e>
     114:	cb 01       	movw	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	25 e0       	ldi	r18, 0x05	; 5
     118:	2a 95       	dec	r18
     11a:	f1 f7       	brne	.-4      	; 0x118 <displaySendCommand+0x74>
     11c:	00 00       	nop
     11e:	01 97       	sbiw	r24, 0x01	; 1
     120:	d1 f7       	brne	.-12     	; 0x116 <displaySendCommand+0x72>
		DISPLAY_DATA_PINS_PORT = ((((buf & 0x1) << 3) | ((buf & 0x2) << 1) | ((buf & 0x4) >> 1) | ((buf & 0x8) >> 3)) << DISPLAY_DATA_PINS_SHIFT) | (DISPLAY_DATA_PINS_PORT & (~DISPLAY_DATA_PINS_MASK));		
	}

	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
	delay_us(delay_in_us);
	DISPLAY_CONFIG_PINS_PORT &= ~(1 << DISPLAY_CONFIG_PIN_E);
     122:	ae 98       	cbi	0x15, 6	; 21
     124:	85 e0       	ldi	r24, 0x05	; 5
     126:	8a 95       	dec	r24
     128:	f1 f7       	brne	.-4      	; 0x126 <displaySendCommand+0x82>
     12a:	00 00       	nop
     12c:	25 e0       	ldi	r18, 0x05	; 5
     12e:	2a 95       	dec	r18
     130:	f1 f7       	brne	.-4      	; 0x12e <displaySendCommand+0x8a>
     132:	00 00       	nop
     134:	85 e0       	ldi	r24, 0x05	; 5
     136:	8a 95       	dec	r24
     138:	f1 f7       	brne	.-4      	; 0x136 <displaySendCommand+0x92>
     13a:	00 00       	nop
     13c:	25 e0       	ldi	r18, 0x05	; 5
     13e:	2a 95       	dec	r18
     140:	f1 f7       	brne	.-4      	; 0x13e <displaySendCommand+0x9a>
     142:	00 00       	nop
     144:	85 e0       	ldi	r24, 0x05	; 5
     146:	8a 95       	dec	r24
     148:	f1 f7       	brne	.-4      	; 0x146 <displaySendCommand+0xa2>
     14a:	00 00       	nop
	{
		/* No need to invert data in the port */
		// TODO: implement		
	} else
	{			
		buf = (command & 0x0F);
     14c:	1f 70       	andi	r17, 0x0F	; 15
		DISPLAY_DATA_PINS_PORT = ((((buf & 0x1) << 3) | ((buf & 0x2) << 1) | ((buf & 0x4) >> 1) | ((buf & 0x8) >> 3)) << DISPLAY_DATA_PINS_SHIFT) | (DISPLAY_DATA_PINS_PORT & (~DISPLAY_DATA_PINS_MASK));		
     14e:	81 2f       	mov	r24, r17
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	e5 b3       	in	r30, 0x15	; 21
     154:	ac 01       	movw	r20, r24
     156:	42 70       	andi	r20, 0x02	; 2
     158:	50 70       	andi	r21, 0x00	; 0
     15a:	44 0f       	add	r20, r20
     15c:	55 1f       	adc	r21, r21
     15e:	9c 01       	movw	r18, r24
     160:	21 70       	andi	r18, 0x01	; 1
     162:	30 70       	andi	r19, 0x00	; 0
     164:	22 0f       	add	r18, r18
     166:	33 1f       	adc	r19, r19
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	42 2b       	or	r20, r18
     172:	53 2b       	or	r21, r19
     174:	9c 01       	movw	r18, r24
     176:	24 70       	andi	r18, 0x04	; 4
     178:	30 70       	andi	r19, 0x00	; 0
     17a:	35 95       	asr	r19
     17c:	27 95       	ror	r18
     17e:	42 2b       	or	r20, r18
     180:	53 2b       	or	r21, r19
     182:	9c 01       	movw	r18, r24
     184:	36 95       	lsr	r19
     186:	27 95       	ror	r18
     188:	36 95       	lsr	r19
     18a:	27 95       	ror	r18
     18c:	36 95       	lsr	r19
     18e:	27 95       	ror	r18
     190:	ca 01       	movw	r24, r20
     192:	82 2b       	or	r24, r18
     194:	93 2b       	or	r25, r19
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	2e 2f       	mov	r18, r30
     1a0:	23 7c       	andi	r18, 0xC3	; 195
     1a2:	82 2b       	or	r24, r18
     1a4:	85 bb       	out	0x15, r24	; 21
	}

	/* E = A7 */
	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
     1a6:	ae 9a       	sbi	0x15, 6	; 21

  } 
} 

static inline void delay_us(uint16_t count) { 
  while(count--) { 
     1a8:	61 15       	cp	r22, r1
     1aa:	71 05       	cpc	r23, r1
     1ac:	39 f0       	breq	.+14     	; 0x1bc <displaySendCommand+0x118>
     1ae:	25 e0       	ldi	r18, 0x05	; 5
     1b0:	2a 95       	dec	r18
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <displaySendCommand+0x10c>
     1b4:	00 00       	nop
     1b6:	61 50       	subi	r22, 0x01	; 1
     1b8:	70 40       	sbci	r23, 0x00	; 0
     1ba:	c9 f7       	brne	.-14     	; 0x1ae <displaySendCommand+0x10a>
	}

	/* E = A7 */
	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
	delay_us(delay_in_us);
	DISPLAY_CONFIG_PINS_PORT &= ~(1 << DISPLAY_CONFIG_PIN_E);
     1bc:	ae 98       	cbi	0x15, 6	; 21
     1be:	85 e0       	ldi	r24, 0x05	; 5
     1c0:	8a 95       	dec	r24
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <displaySendCommand+0x11c>
     1c4:	00 00       	nop
     1c6:	25 e0       	ldi	r18, 0x05	; 5
     1c8:	2a 95       	dec	r18
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <displaySendCommand+0x124>
     1cc:	00 00       	nop
     1ce:	85 e0       	ldi	r24, 0x05	; 5
     1d0:	8a 95       	dec	r24
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <displaySendCommand+0x12c>
     1d4:	00 00       	nop
     1d6:	25 e0       	ldi	r18, 0x05	; 5
     1d8:	2a 95       	dec	r18
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <displaySendCommand+0x134>
     1dc:	00 00       	nop
     1de:	85 e0       	ldi	r24, 0x05	; 5
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <displaySendCommand+0x13c>
     1e4:	00 00       	nop
	
#else
	#error
#endif

}
     1e6:	1f 91       	pop	r17
     1e8:	08 95       	ret

000001ea <displayClear>:

void displayClear()
{
	/* Clear display */
	/* Wait for more than 1.53 ms */
	displaySendCommand(DISPLAY_COMMAND_CLEAR_DISPLAY, 1540);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	50 e8       	ldi	r21, 0x80	; 128
     1f0:	60 ec       	ldi	r22, 0xC0	; 192
     1f2:	74 e4       	ldi	r23, 0x44	; 68
     1f4:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>

	/* Why don't just set DDRAM address? It takes less time */
	displaySendCommand(DISPLAY_COMMAND_RETURN_HOME, 1540);
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e8       	ldi	r21, 0x80	; 128
     1fe:	60 ec       	ldi	r22, 0xC0	; 192
     200:	74 e4       	ldi	r23, 0x44	; 68
     202:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>
}
     206:	08 95       	ret

00000208 <initDisplay>:
	/*	  
	Start up steps 

	1. Wait for more than 40 ms after VDD rises to 4.5 V */

	DISPLAY_CONFIG_PINS_DDR  |= (1 << DISPLAY_CONFIG_PIN_RS) | (1 << DISPLAY_CONFIG_PIN_E);
     208:	84 b3       	in	r24, 0x14	; 20
     20a:	80 6c       	ori	r24, 0xC0	; 192
     20c:	84 bb       	out	0x14, r24	; 20
	DISPLAY_CONFIG_PINS_PORT  &= ~(1 << DISPLAY_CONFIG_PIN_RS);
     20e:	af 98       	cbi	0x15, 7	; 21
	DISPLAY_CONFIG_PINS_PORT  &= ~(1 << DISPLAY_CONFIG_PIN_E);
     210:	ae 98       	cbi	0x15, 6	; 21

	DISPLAY_DATA_PINS_DDR |= DISPLAY_DATA_PINS_MASK;
     212:	84 b3       	in	r24, 0x14	; 20
     214:	8c 63       	ori	r24, 0x3C	; 60
     216:	84 bb       	out	0x14, r24	; 20
     218:	82 e3       	ldi	r24, 0x32	; 50
     21a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	ef e9       	ldi	r30, 0x9F	; 159
     21e:	ff e0       	ldi	r31, 0x0F	; 15
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <initDisplay+0x18>
     224:	00 c0       	rjmp	.+0      	; 0x226 <initDisplay+0x1e>
     226:	00 00       	nop
     228:	01 97       	sbiw	r24, 0x01	; 1
	}
	return symb;
}

static inline void delay_ms(uint16_t count) { 
  while(count--) { 
     22a:	c1 f7       	brne	.-16     	; 0x21c <initDisplay+0x14>

	/* 	Wait for more than 39us */	
#ifdef DISPLAY_MODE_8BIT	
	displaySendCommand(DISPLAY_COMMAND_FUNCTION_SET | DISPLAY_DATA_LENGTH_8BIT | DISPLAY_TYPE_2LINE | DISPLAY_SYMB_SIZE_5X8,40);
#elif defined DISPLAY_MODE_4BIT
	displaySendCommand(DISPLAY_COMMAND_FUNCTION_SET | DISPLAY_DATA_LENGTH_4BIT, 40);
     22c:	80 e2       	ldi	r24, 0x20	; 32
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	60 e2       	ldi	r22, 0x20	; 32
     234:	72 e4       	ldi	r23, 0x42	; 66
     236:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>
		/* No need to invert data in the port */
		// TODO: implement		
	} else
	{		
		buf = ((DISPLAY_COMMAND_FUNCTION_SET | DISPLAY_DATA_LENGTH_8BIT) >> 4);
		DISPLAY_DATA_PINS_PORT = ((((buf & 0x1) << 3) | ((buf & 0x2) << 1) | ((buf & 0x4) >> 1) | ((buf & 0x8) >> 3)) << DISPLAY_DATA_PINS_SHIFT) | (DISPLAY_DATA_PINS_PORT & (~DISPLAY_DATA_PINS_MASK));
     23a:	85 b3       	in	r24, 0x15	; 21
     23c:	83 7c       	andi	r24, 0xC3	; 195
     23e:	80 63       	ori	r24, 0x30	; 48
     240:	85 bb       	out	0x15, r24	; 21
	}
	
	
	/* Pull up E */
	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
     242:	ae 9a       	sbi	0x15, 6	; 21

  } 
} 

static inline void delay_us(uint16_t count) { 
  while(count--) { 
     244:	87 e2       	ldi	r24, 0x27	; 39
     246:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     248:	f5 e0       	ldi	r31, 0x05	; 5
     24a:	fa 95       	dec	r31
     24c:	f1 f7       	brne	.-4      	; 0x24a <initDisplay+0x42>
     24e:	00 00       	nop
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	2f ef       	ldi	r18, 0xFF	; 255
     254:	8f 3f       	cpi	r24, 0xFF	; 255
     256:	92 07       	cpc	r25, r18
     258:	b9 f7       	brne	.-18     	; 0x248 <initDisplay+0x40>
	
	
	/* Pull up E */
	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
	delay_us(40);
	DISPLAY_CONFIG_PINS_PORT &= ~(1 << DISPLAY_CONFIG_PIN_E);
     25a:	ae 98       	cbi	0x15, 6	; 21

	displaySendCommand(DISPLAY_COMMAND_FUNCTION_SET | DISPLAY_DATA_LENGTH_4BIT | DISPLAY_TYPE_2LINE | DISPLAY_SYMB_SIZE_5X8,40);	
     25c:	88 e2       	ldi	r24, 0x28	; 40
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 e2       	ldi	r22, 0x20	; 32
     264:	72 e4       	ldi	r23, 0x42	; 66
     266:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>
	#error
#endif

	/* Display ON/OFF control */
	/* Wait for more than 37 us */
	displaySendCommand(DISPLAY_COMMAND_DISPLAY_ON_OFF | DISPLAY_ON | DISPLAY_CURSOR_OFF | DISPLAY_CURSOR_BLINKING_OFF,38);
     26a:	8c e0       	ldi	r24, 0x0C	; 12
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	68 e1       	ldi	r22, 0x18	; 24
     272:	72 e4       	ldi	r23, 0x42	; 66
     274:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>

	/* Clear display */

	/* Wait for more than 1.53 ms */
	displaySendCommand(DISPLAY_COMMAND_CLEAR_DISPLAY, 1540);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e8       	ldi	r21, 0x80	; 128
     27e:	60 ec       	ldi	r22, 0xC0	; 192
     280:	74 e4       	ldi	r23, 0x44	; 68
     282:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>

	/* Entry mode set */
	/* Wait for more than 39 us */

	displaySendCommand(DISPLAY_COMMAND_ENTRY_MODE_SET | DISPLAY_ENTRY_MODE_INCREMENT | DISPLAY_ENTRY_MODE_SHIFT_OFF, 40);
     286:	86 e0       	ldi	r24, 0x06	; 6
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e2       	ldi	r22, 0x20	; 32
     28e:	72 e4       	ldi	r23, 0x42	; 66
     290:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>

	/* Move cursor */
	displaySendCommand(DISPLAY_COMMAND_RETURN_HOME, 1540);
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	50 e8       	ldi	r21, 0x80	; 128
     29a:	60 ec       	ldi	r22, 0xC0	; 192
     29c:	74 e4       	ldi	r23, 0x44	; 68
     29e:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>

}
     2a2:	08 95       	ret

000002a4 <displaySendData>:
}

void displaySendData(uint8_t data)
{
	uint8_t buf = 0;
	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_RS ); // 0 - command, 1 - data 
     2a4:	af 9a       	sbi	0x15, 7	; 21
	{
		/* No need to invert data in the port */
		// TODO: implement		
	} else
	{			
		buf = (data & 0xF0) >> 4;
     2a6:	28 2f       	mov	r18, r24
     2a8:	22 95       	swap	r18
     2aa:	2f 70       	andi	r18, 0x0F	; 15
		DISPLAY_DATA_PINS_PORT = ((((buf & 0x1) << 3) | ((buf & 0x2) << 1) | ((buf & 0x4) >> 1) | ((buf & 0x8) >> 3)) << DISPLAY_DATA_PINS_SHIFT) | (DISPLAY_DATA_PINS_PORT & (~DISPLAY_DATA_PINS_MASK));		
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	95 b3       	in	r25, 0x15	; 21
     2b0:	b9 01       	movw	r22, r18
     2b2:	62 70       	andi	r22, 0x02	; 2
     2b4:	70 70       	andi	r23, 0x00	; 0
     2b6:	66 0f       	add	r22, r22
     2b8:	77 1f       	adc	r23, r23
     2ba:	a9 01       	movw	r20, r18
     2bc:	41 70       	andi	r20, 0x01	; 1
     2be:	50 70       	andi	r21, 0x00	; 0
     2c0:	44 0f       	add	r20, r20
     2c2:	55 1f       	adc	r21, r21
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	44 0f       	add	r20, r20
     2ca:	55 1f       	adc	r21, r21
     2cc:	64 2b       	or	r22, r20
     2ce:	75 2b       	or	r23, r21
     2d0:	a9 01       	movw	r20, r18
     2d2:	44 70       	andi	r20, 0x04	; 4
     2d4:	50 70       	andi	r21, 0x00	; 0
     2d6:	55 95       	asr	r21
     2d8:	47 95       	ror	r20
     2da:	64 2b       	or	r22, r20
     2dc:	75 2b       	or	r23, r21
     2de:	a9 01       	movw	r20, r18
     2e0:	56 95       	lsr	r21
     2e2:	47 95       	ror	r20
     2e4:	56 95       	lsr	r21
     2e6:	47 95       	ror	r20
     2e8:	56 95       	lsr	r21
     2ea:	47 95       	ror	r20
     2ec:	9b 01       	movw	r18, r22
     2ee:	24 2b       	or	r18, r20
     2f0:	35 2b       	or	r19, r21
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	22 0f       	add	r18, r18
     2f8:	33 1f       	adc	r19, r19
     2fa:	93 7c       	andi	r25, 0xC3	; 195
     2fc:	29 2b       	or	r18, r25
     2fe:	25 bb       	out	0x15, r18	; 21
	}


	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
     300:	ae 9a       	sbi	0x15, 6	; 21
     302:	28 e2       	ldi	r18, 0x28	; 40
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	95 e0       	ldi	r25, 0x05	; 5
     308:	9a 95       	dec	r25
     30a:	f1 f7       	brne	.-4      	; 0x308 <displaySendData+0x64>
     30c:	00 00       	nop
     30e:	21 50       	subi	r18, 0x01	; 1
     310:	30 40       	sbci	r19, 0x00	; 0

  } 
} 

static inline void delay_us(uint16_t count) { 
  while(count--) { 
     312:	c9 f7       	brne	.-14     	; 0x306 <displaySendData+0x62>
	}


	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
	delay_us(40);
	DISPLAY_CONFIG_PINS_PORT &= ~(1 << DISPLAY_CONFIG_PIN_E);
     314:	ae 98       	cbi	0x15, 6	; 21
	{
		/* No need to invert data in the port */
		// TODO: implement		
	} else
	{				
		buf = (data & 0x0F);
     316:	8f 70       	andi	r24, 0x0F	; 15
		DISPLAY_DATA_PINS_PORT = ((((buf & 0x1) << 3) | ((buf & 0x2) << 1) | ((buf & 0x4) >> 1) | ((buf & 0x8) >> 3)) << DISPLAY_DATA_PINS_SHIFT) | (DISPLAY_DATA_PINS_PORT & (~DISPLAY_DATA_PINS_MASK));		
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	65 b3       	in	r22, 0x15	; 21
     31c:	ac 01       	movw	r20, r24
     31e:	42 70       	andi	r20, 0x02	; 2
     320:	50 70       	andi	r21, 0x00	; 0
     322:	44 0f       	add	r20, r20
     324:	55 1f       	adc	r21, r21
     326:	9c 01       	movw	r18, r24
     328:	21 70       	andi	r18, 0x01	; 1
     32a:	30 70       	andi	r19, 0x00	; 0
     32c:	22 0f       	add	r18, r18
     32e:	33 1f       	adc	r19, r19
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	22 0f       	add	r18, r18
     336:	33 1f       	adc	r19, r19
     338:	42 2b       	or	r20, r18
     33a:	53 2b       	or	r21, r19
     33c:	9c 01       	movw	r18, r24
     33e:	24 70       	andi	r18, 0x04	; 4
     340:	30 70       	andi	r19, 0x00	; 0
     342:	35 95       	asr	r19
     344:	27 95       	ror	r18
     346:	42 2b       	or	r20, r18
     348:	53 2b       	or	r21, r19
     34a:	9c 01       	movw	r18, r24
     34c:	36 95       	lsr	r19
     34e:	27 95       	ror	r18
     350:	36 95       	lsr	r19
     352:	27 95       	ror	r18
     354:	36 95       	lsr	r19
     356:	27 95       	ror	r18
     358:	ca 01       	movw	r24, r20
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	26 2f       	mov	r18, r22
     368:	23 7c       	andi	r18, 0xC3	; 195
     36a:	82 2b       	or	r24, r18
     36c:	85 bb       	out	0x15, r24	; 21
	}

	/* E = A7 */
	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
     36e:	ae 9a       	sbi	0x15, 6	; 21

  } 
} 

static inline void delay_us(uint16_t count) { 
  while(count--) { 
     370:	87 e2       	ldi	r24, 0x27	; 39
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	25 e0       	ldi	r18, 0x05	; 5
     376:	2a 95       	dec	r18
     378:	f1 f7       	brne	.-4      	; 0x376 <displaySendData+0xd2>
     37a:	00 00       	nop
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	2f ef       	ldi	r18, 0xFF	; 255
     380:	8f 3f       	cpi	r24, 0xFF	; 255
     382:	92 07       	cpc	r25, r18
     384:	b9 f7       	brne	.-18     	; 0x374 <displaySendData+0xd0>
	}

	/* E = A7 */
	DISPLAY_CONFIG_PINS_PORT |= (1 << DISPLAY_CONFIG_PIN_E);
	delay_us(40);
	DISPLAY_CONFIG_PINS_PORT &= ~(1 << DISPLAY_CONFIG_PIN_E);
     386:	ae 98       	cbi	0x15, 6	; 21

#else
	#error
#endif

}
     388:	08 95       	ret

0000038a <displayTranslateSymb>:

char displayTranslateSymb(const char symb)
{
	switch (symb)
     38a:	8c 37       	cpi	r24, 0x7C	; 124
     38c:	09 f4       	brne	.+2      	; 0x390 <displayTranslateSymb+0x6>
	{

		/* Special symbols */
		case '|':
				return 0xff;
     38e:	8f ef       	ldi	r24, 0xFF	; 255

		default:
			break;
	}
	return symb;
}
     390:	08 95       	ret

00000392 <displayPrintString>:
	/* Why don't just set DDRAM address? It takes less time */
	displaySendCommand(DISPLAY_COMMAND_RETURN_HOME, 1540);
}

void displayPrintString(const char *string)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
	uint16_t counter = 0;
	while (string[counter] != 0)
     398:	88 81       	ld	r24, Y
     39a:	88 23       	and	r24, r24
     39c:	41 f0       	breq	.+16     	; 0x3ae <displayPrintString+0x1c>

	/* Why don't just set DDRAM address? It takes less time */
	displaySendCommand(DISPLAY_COMMAND_RETURN_HOME, 1540);
}

void displayPrintString(const char *string)
     39e:	21 96       	adiw	r28, 0x01	; 1
{
	uint16_t counter = 0;
	while (string[counter] != 0)
	{
		displaySendData(displayTranslateSymb(string[counter]));
     3a0:	0e 94 c5 01 	call	0x38a	; 0x38a <displayTranslateSymb>
     3a4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <displaySendData>
}

void displayPrintString(const char *string)
{
	uint16_t counter = 0;
	while (string[counter] != 0)
     3a8:	89 91       	ld	r24, Y+
     3aa:	88 23       	and	r24, r24
     3ac:	c9 f7       	brne	.-14     	; 0x3a0 <displayPrintString+0xe>
	{
		displaySendData(displayTranslateSymb(string[counter]));
		counter++;
	}
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <displayPrintLine>:

void displayPrintLine(const char *line1, const char* line2)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
     3be:	8b 01       	movw	r16, r22
	//displaySendCommand(DISPLAY_COMMAND_RETURN_HOME, 1540);
	displaySendCommand(DISPLAY_COMMAND_SET_DDRAM_ADDRESS, 40);
     3c0:	80 e8       	ldi	r24, 0x80	; 128
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	60 e2       	ldi	r22, 0x20	; 32
     3c8:	72 e4       	ldi	r23, 0x42	; 66
     3ca:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>
	displayPrintString(line1);
     3ce:	ce 01       	movw	r24, r28
     3d0:	0e 94 c9 01 	call	0x392	; 0x392 <displayPrintString>


	/* Shift DDRAM address pointer to 40h */
	displaySendCommand(DISPLAY_COMMAND_SET_DDRAM_ADDRESS | 0x40, 40);
     3d4:	80 ec       	ldi	r24, 0xC0	; 192
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	60 e2       	ldi	r22, 0x20	; 32
     3dc:	72 e4       	ldi	r23, 0x42	; 66
     3de:	0e 94 52 00 	call	0xa4	; 0xa4 <displaySendCommand>
	displayPrintString(line2);
     3e2:	c8 01       	movw	r24, r16
     3e4:	0e 94 c9 01 	call	0x392	; 0x392 <displayPrintString>
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <encoder_monitor_init>:
	/* PD0 - encoder button, normally pulled up
	   Encoder A - PD3, B - PD1, normally pulled up */
	
	/* Start Timer2, which is used to analyse state of the connected Encoder  
	   WGM21=1 - Clear Timer on Compare mode; 64 - prescaler, 256 TOP == ~1 kHz */	
	TCCR2 = (1 << WGM21) | (1 << CS22);	
     3f2:	8c e0       	ldi	r24, 0x0C	; 12
     3f4:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0xFF;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2); /* Enable output compare match interrupt. */
     3fa:	89 b7       	in	r24, 0x39	; 57
     3fc:	80 68       	ori	r24, 0x80	; 128
     3fe:	89 bf       	out	0x39, r24	; 57
	/* Use the following code to stop Timer2 whenever required ( currently not used ) */
	#if 0
		TIMSK &= ~(1 << OCIE2); 
		TCCR2 = 0;		
	#endif
}
     400:	08 95       	ret

00000402 <encoder_monitor_handle_timer_int>:
{
	uint8_t enc_current_state;
	/* This is called ~1000 times a second, i.e. 1 kHz
	  * 16 000 000 (16Mhz sys clock) / 64 (pre-scaler) / 256 (top) */
	// Read encoder state
	enc_current_state = PIND & ((1 << PD3) | (1 << PD1));
     402:	90 b3       	in	r25, 0x10	; 16
     404:	9a 70       	andi	r25, 0x0A	; 10
	switch(EncoderState)
     406:	80 91 f2 00 	lds	r24, 0x00F2
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	01 f1       	breq	.+64     	; 0x44e <encoder_monitor_handle_timer_int+0x4c>
     40e:	83 30       	cpi	r24, 0x03	; 3
     410:	18 f4       	brcc	.+6      	; 0x418 <encoder_monitor_handle_timer_int+0x16>
     412:	88 23       	and	r24, r24
     414:	89 f0       	breq	.+34     	; 0x438 <encoder_monitor_handle_timer_int+0x36>
     416:	30 c0       	rjmp	.+96     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	19 f0       	breq	.+6      	; 0x422 <encoder_monitor_handle_timer_int+0x20>
     41c:	8a 30       	cpi	r24, 0x0A	; 10
     41e:	61 f5       	brne	.+88     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
     420:	21 c0       	rjmp	.+66     	; 0x464 <encoder_monitor_handle_timer_int+0x62>
	{
	case 8:
		{
		if(enc_current_state == 10) EncoderAction = ENCODER_ACTION_RIGHT;
     422:	9a 30       	cpi	r25, 0x0A	; 10
     424:	19 f4       	brne	.+6      	; 0x42c <encoder_monitor_handle_timer_int+0x2a>
     426:	10 92 60 00 	sts	0x0060, r1
     42a:	26 c0       	rjmp	.+76     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
		if(enc_current_state == 0) EncoderAction = ENCODER_ACTION_LEFT; 
     42c:	99 23       	and	r25, r25
     42e:	21 f5       	brne	.+72     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 60 00 	sts	0x0060, r24
     436:	20 c0       	rjmp	.+64     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
		break;
		}
 
	case 0:
		{
		if(enc_current_state == 8) EncoderAction = ENCODER_ACTION_RIGHT;
     438:	98 30       	cpi	r25, 0x08	; 8
     43a:	19 f4       	brne	.+6      	; 0x442 <encoder_monitor_handle_timer_int+0x40>
     43c:	10 92 60 00 	sts	0x0060, r1
     440:	1b c0       	rjmp	.+54     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
		if(enc_current_state == 2) EncoderAction = ENCODER_ACTION_LEFT; 
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	c9 f4       	brne	.+50     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 60 00 	sts	0x0060, r24
     44c:	15 c0       	rjmp	.+42     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
		break;
		}
	case 2:
		{
		if(enc_current_state == 0) EncoderAction = ENCODER_ACTION_RIGHT;
     44e:	99 23       	and	r25, r25
     450:	19 f4       	brne	.+6      	; 0x458 <encoder_monitor_handle_timer_int+0x56>
     452:	10 92 60 00 	sts	0x0060, r1
     456:	10 c0       	rjmp	.+32     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
		if(enc_current_state == 10) EncoderAction = ENCODER_ACTION_LEFT; 
     458:	9a 30       	cpi	r25, 0x0A	; 10
     45a:	71 f4       	brne	.+28     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 60 00 	sts	0x0060, r24
     462:	0a c0       	rjmp	.+20     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
		break;
		}
	case 10:
		{
		if(enc_current_state == 2) EncoderAction = ENCODER_ACTION_RIGHT;
     464:	92 30       	cpi	r25, 0x02	; 2
     466:	19 f4       	brne	.+6      	; 0x46e <encoder_monitor_handle_timer_int+0x6c>
     468:	10 92 60 00 	sts	0x0060, r1
     46c:	05 c0       	rjmp	.+10     	; 0x478 <encoder_monitor_handle_timer_int+0x76>
		if(enc_current_state == 8) EncoderAction = ENCODER_ACTION_LEFT; 
     46e:	98 30       	cpi	r25, 0x08	; 8
     470:	19 f4       	brne	.+6      	; 0x478 <encoder_monitor_handle_timer_int+0x76>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 60 00 	sts	0x0060, r24
		break;
		}
	}
EncoderState = enc_current_state;
     478:	90 93 f2 00 	sts	0x00F2, r25
}
     47c:	08 95       	ret

0000047e <encoder_monitor_get_last_action>:

uint8_t encoder_monitor_get_last_action()
{
	uint8_t encoder_action = EncoderAction;
     47e:	80 91 60 00 	lds	r24, 0x0060
	EncoderAction = ENCODER_ACTION_NO_ACTION;
     482:	9f ef       	ldi	r25, 0xFF	; 255
     484:	90 93 60 00 	sts	0x0060, r25
	return encoder_action;
     488:	08 95       	ret

0000048a <one_wire_initialize_bus>:
#include <util/delay.h>
#include <stdlib.h>


one_wire_bus_data_t* one_wire_initialize_bus(one_wire_port_t port, int pin)
{
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	18 2f       	mov	r17, r24
     492:	eb 01       	movw	r28, r22
	one_wire_bus_data_t *pData = malloc(sizeof(one_wire_bus_data_t));
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 18 09 	call	0x1230	; 0x1230 <malloc>
     49c:	e8 2f       	mov	r30, r24
     49e:	f9 2f       	mov	r31, r25
     4a0:	9f 01       	movw	r18, r30
	if (NULL == pData)
     4a2:	21 15       	cp	r18, r1
     4a4:	31 05       	cpc	r19, r1
     4a6:	51 f0       	breq	.+20     	; 0x4bc <one_wire_initialize_bus+0x32>
		return NULL;
	pData->port = port;
     4a8:	10 83       	st	Z, r17
	pData->pin 	= pin;
     4aa:	d2 83       	std	Z+2, r29	; 0x02
     4ac:	c1 83       	std	Z+1, r28	; 0x01

	/* Configure the pin as pulled-up output by default, to charge capacitors of devices */
	switch (pData->port)
     4ae:	14 30       	cpi	r17, 0x04	; 4
     4b0:	28 f0       	brcs	.+10     	; 0x4bc <one_wire_initialize_bus+0x32>
		//	PORTD |= (1 << pData->pin);
			break;

		default:
			/* Something went wrong */
			free(pData);
     4b2:	c9 01       	movw	r24, r18
     4b4:	0e 94 b2 09 	call	0x1364	; 0x1364 <free>
			return NULL;
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
	}

	return pData;
}
     4bc:	82 2f       	mov	r24, r18
     4be:	93 2f       	mov	r25, r19
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	08 95       	ret

000004c8 <one_wire_check_presence>:

bool one_wire_check_presence(const one_wire_bus_data_t* pBus)
{
     4c8:	fc 01       	movw	r30, r24
	bool res = false;

	switch (pBus->port)
     4ca:	80 81       	ld	r24, Z
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <one_wire_check_presence+0xa>
     4d0:	48 c0       	rjmp	.+144    	; 0x562 <one_wire_check_presence+0x9a>
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	38 f0       	brcs	.+14     	; 0x4e4 <one_wire_check_presence+0x1c>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	09 f4       	brne	.+2      	; 0x4dc <one_wire_check_presence+0x14>
     4da:	82 c0       	rjmp	.+260    	; 0x5e0 <one_wire_check_presence+0x118>
     4dc:	83 30       	cpi	r24, 0x03	; 3
     4de:	09 f0       	breq	.+2      	; 0x4e2 <one_wire_check_presence+0x1a>
     4e0:	fd c0       	rjmp	.+506    	; 0x6dc <one_wire_check_presence+0x214>
     4e2:	bd c0       	rjmp	.+378    	; 0x65e <one_wire_check_presence+0x196>
	{
		case ONE_WIRE_PORT_A:
			/* Mux PIN as pulled down out */ 
			DDRA |= 1 << pBus->pin;
     4e4:	4a b3       	in	r20, 0x1a	; 26
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	9c 01       	movw	r18, r24
     4ec:	01 80       	ldd	r0, Z+1	; 0x01
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <one_wire_check_presence+0x2c>
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <one_wire_check_presence+0x28>
     4f8:	24 2b       	or	r18, r20
     4fa:	2a bb       	out	0x1a, r18	; 26
			PORTA &= ~(1 << pBus->pin);
     4fc:	4b b3       	in	r20, 0x1b	; 27
     4fe:	9c 01       	movw	r18, r24
     500:	01 80       	ldd	r0, Z+1	; 0x01
     502:	02 c0       	rjmp	.+4      	; 0x508 <one_wire_check_presence+0x40>
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	0a 94       	dec	r0
     50a:	e2 f7       	brpl	.-8      	; 0x504 <one_wire_check_presence+0x3c>
     50c:	20 95       	com	r18
     50e:	24 23       	and	r18, r20
     510:	2b bb       	out	0x1b, r18	; 27
     512:	af e7       	ldi	r26, 0x7F	; 127
     514:	b7 e0       	ldi	r27, 0x07	; 7
     516:	11 97       	sbiw	r26, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <one_wire_check_presence+0x4e>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <one_wire_check_presence+0x54>
     51c:	00 00       	nop
			/* Pause 480 us */
			_delay_us(480);
			/* Mux PIN as input */
			DDRA &= ~(1 << pBus->pin);
     51e:	2a b3       	in	r18, 0x1a	; 26
     520:	01 80       	ldd	r0, Z+1	; 0x01
     522:	02 c0       	rjmp	.+4      	; 0x528 <one_wire_check_presence+0x60>
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	0a 94       	dec	r0
     52a:	e2 f7       	brpl	.-8      	; 0x524 <one_wire_check_presence+0x5c>
     52c:	80 95       	com	r24
     52e:	82 23       	and	r24, r18
     530:	8a bb       	out	0x1a, r24	; 26
     532:	87 e1       	ldi	r24, 0x17	; 23
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <one_wire_check_presence+0x6e>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <one_wire_check_presence+0x74>
     53c:	00 00       	nop
			/* Pause 70 us */
			_delay_us(70);
			/* Normally PIN should be pulled-down by a remote device */
			if ((PINA & (1 << pBus->pin)) == 0x0)
     53e:	29 b3       	in	r18, 0x19	; 25
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	01 80       	ldd	r0, Z+1	; 0x01
     544:	02 c0       	rjmp	.+4      	; 0x54a <one_wire_check_presence+0x82>
     546:	35 95       	asr	r19
     548:	27 95       	ror	r18
     54a:	0a 94       	dec	r0
     54c:	e2 f7       	brpl	.-8      	; 0x546 <one_wire_check_presence+0x7e>
	}

	return pData;
}

bool one_wire_check_presence(const one_wire_bus_data_t* pBus)
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	20 fd       	sbrc	r18, 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	a7 e6       	ldi	r26, 0x67	; 103
     556:	b6 e0       	ldi	r27, 0x06	; 6
     558:	11 97       	sbiw	r26, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <one_wire_check_presence+0x90>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <one_wire_check_presence+0x96>
     55e:	00 00       	nop
     560:	08 95       	ret
			 _delay_us(410);		
			
			break;
		case ONE_WIRE_PORT_B:
			/* Mux PIN as pulled down out */ 			
			DDRB |= 1 << pBus->pin;
     562:	47 b3       	in	r20, 0x17	; 23
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	9c 01       	movw	r18, r24
     56a:	01 80       	ldd	r0, Z+1	; 0x01
     56c:	02 c0       	rjmp	.+4      	; 0x572 <one_wire_check_presence+0xaa>
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	0a 94       	dec	r0
     574:	e2 f7       	brpl	.-8      	; 0x56e <one_wire_check_presence+0xa6>
     576:	24 2b       	or	r18, r20
     578:	27 bb       	out	0x17, r18	; 23
			PORTB &= ~(1 << pBus->pin);
     57a:	48 b3       	in	r20, 0x18	; 24
     57c:	9c 01       	movw	r18, r24
     57e:	01 80       	ldd	r0, Z+1	; 0x01
     580:	02 c0       	rjmp	.+4      	; 0x586 <one_wire_check_presence+0xbe>
     582:	22 0f       	add	r18, r18
     584:	33 1f       	adc	r19, r19
     586:	0a 94       	dec	r0
     588:	e2 f7       	brpl	.-8      	; 0x582 <one_wire_check_presence+0xba>
     58a:	20 95       	com	r18
     58c:	24 23       	and	r18, r20
     58e:	28 bb       	out	0x18, r18	; 24
     590:	af e7       	ldi	r26, 0x7F	; 127
     592:	b7 e0       	ldi	r27, 0x07	; 7
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <one_wire_check_presence+0xcc>
     598:	00 c0       	rjmp	.+0      	; 0x59a <one_wire_check_presence+0xd2>
     59a:	00 00       	nop
			/* Pause 480 us */
			_delay_us(480);
			/* Mux PIN as input */
			DDRB &= ~(1 << pBus->pin);
     59c:	27 b3       	in	r18, 0x17	; 23
     59e:	01 80       	ldd	r0, Z+1	; 0x01
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <one_wire_check_presence+0xde>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <one_wire_check_presence+0xda>
     5aa:	80 95       	com	r24
     5ac:	82 23       	and	r24, r18
     5ae:	87 bb       	out	0x17, r24	; 23
     5b0:	87 e1       	ldi	r24, 0x17	; 23
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <one_wire_check_presence+0xec>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <one_wire_check_presence+0xf2>
     5ba:	00 00       	nop
			/* Pause 70 us */
			_delay_us(70);
			
			/* Normally PIN should be pulled-down by a remote device */
			if ((PINB & (1 << pBus->pin)) == 0x0)
     5bc:	26 b3       	in	r18, 0x16	; 22
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	01 80       	ldd	r0, Z+1	; 0x01
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <one_wire_check_presence+0x100>
     5c4:	35 95       	asr	r19
     5c6:	27 95       	ror	r18
     5c8:	0a 94       	dec	r0
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <one_wire_check_presence+0xfc>
	}

	return pData;
}

bool one_wire_check_presence(const one_wire_bus_data_t* pBus)
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	20 fd       	sbrc	r18, 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	a7 e6       	ldi	r26, 0x67	; 103
     5d4:	b6 e0       	ldi	r27, 0x06	; 6
     5d6:	11 97       	sbiw	r26, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <one_wire_check_presence+0x10e>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <one_wire_check_presence+0x114>
     5dc:	00 00       	nop
     5de:	08 95       	ret
			 _delay_us(410);		

			break;
		case ONE_WIRE_PORT_C:
			/* Mux PIN as pulled down out */ 			
			DDRC |= 1 << pBus->pin;
     5e0:	44 b3       	in	r20, 0x14	; 20
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	9c 01       	movw	r18, r24
     5e8:	01 80       	ldd	r0, Z+1	; 0x01
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <one_wire_check_presence+0x128>
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	0a 94       	dec	r0
     5f2:	e2 f7       	brpl	.-8      	; 0x5ec <one_wire_check_presence+0x124>
     5f4:	24 2b       	or	r18, r20
     5f6:	24 bb       	out	0x14, r18	; 20
			PORTC &= ~(1 << pBus->pin);
     5f8:	45 b3       	in	r20, 0x15	; 21
     5fa:	9c 01       	movw	r18, r24
     5fc:	01 80       	ldd	r0, Z+1	; 0x01
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <one_wire_check_presence+0x13c>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	0a 94       	dec	r0
     606:	e2 f7       	brpl	.-8      	; 0x600 <one_wire_check_presence+0x138>
     608:	20 95       	com	r18
     60a:	24 23       	and	r18, r20
     60c:	25 bb       	out	0x15, r18	; 21
     60e:	af e7       	ldi	r26, 0x7F	; 127
     610:	b7 e0       	ldi	r27, 0x07	; 7
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <one_wire_check_presence+0x14a>
     616:	00 c0       	rjmp	.+0      	; 0x618 <one_wire_check_presence+0x150>
     618:	00 00       	nop
			/* Pause 480 us */
			_delay_us(480);
			/* Mux PIN as input */
			DDRC &= ~(1 << pBus->pin);
     61a:	24 b3       	in	r18, 0x14	; 20
     61c:	01 80       	ldd	r0, Z+1	; 0x01
     61e:	02 c0       	rjmp	.+4      	; 0x624 <one_wire_check_presence+0x15c>
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <one_wire_check_presence+0x158>
     628:	80 95       	com	r24
     62a:	82 23       	and	r24, r18
     62c:	84 bb       	out	0x14, r24	; 20
     62e:	87 e1       	ldi	r24, 0x17	; 23
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <one_wire_check_presence+0x16a>
     636:	00 c0       	rjmp	.+0      	; 0x638 <one_wire_check_presence+0x170>
     638:	00 00       	nop
			/* Pause 70 us */
			_delay_us(70);
			
			/* Normally PIN should be pulled-down by a remote device */
			if ((PINC & (1 << pBus->pin)) == 0x0)
     63a:	23 b3       	in	r18, 0x13	; 19
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	01 80       	ldd	r0, Z+1	; 0x01
     640:	02 c0       	rjmp	.+4      	; 0x646 <one_wire_check_presence+0x17e>
     642:	35 95       	asr	r19
     644:	27 95       	ror	r18
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <one_wire_check_presence+0x17a>
	}

	return pData;
}

bool one_wire_check_presence(const one_wire_bus_data_t* pBus)
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	20 fd       	sbrc	r18, 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	a7 e6       	ldi	r26, 0x67	; 103
     652:	b6 e0       	ldi	r27, 0x06	; 6
     654:	11 97       	sbiw	r26, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <one_wire_check_presence+0x18c>
     658:	00 c0       	rjmp	.+0      	; 0x65a <one_wire_check_presence+0x192>
     65a:	00 00       	nop
     65c:	08 95       	ret
			 _delay_us(410);	

			break;
		case ONE_WIRE_PORT_D:
			/* Mux PIN as pulled down out */ 			
			DDRD |= 1 << pBus->pin;
     65e:	41 b3       	in	r20, 0x11	; 17
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	9c 01       	movw	r18, r24
     666:	01 80       	ldd	r0, Z+1	; 0x01
     668:	02 c0       	rjmp	.+4      	; 0x66e <one_wire_check_presence+0x1a6>
     66a:	22 0f       	add	r18, r18
     66c:	33 1f       	adc	r19, r19
     66e:	0a 94       	dec	r0
     670:	e2 f7       	brpl	.-8      	; 0x66a <one_wire_check_presence+0x1a2>
     672:	24 2b       	or	r18, r20
     674:	21 bb       	out	0x11, r18	; 17
			PORTD &= ~(1 << pBus->pin);
     676:	42 b3       	in	r20, 0x12	; 18
     678:	9c 01       	movw	r18, r24
     67a:	01 80       	ldd	r0, Z+1	; 0x01
     67c:	02 c0       	rjmp	.+4      	; 0x682 <one_wire_check_presence+0x1ba>
     67e:	22 0f       	add	r18, r18
     680:	33 1f       	adc	r19, r19
     682:	0a 94       	dec	r0
     684:	e2 f7       	brpl	.-8      	; 0x67e <one_wire_check_presence+0x1b6>
     686:	20 95       	com	r18
     688:	24 23       	and	r18, r20
     68a:	22 bb       	out	0x12, r18	; 18
     68c:	af e7       	ldi	r26, 0x7F	; 127
     68e:	b7 e0       	ldi	r27, 0x07	; 7
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <one_wire_check_presence+0x1c8>
     694:	00 c0       	rjmp	.+0      	; 0x696 <one_wire_check_presence+0x1ce>
     696:	00 00       	nop
			/* Pause 480 us */
			_delay_us(480);
			/* Mux PIN as input */
			DDRD &= ~(1 << pBus->pin);
     698:	21 b3       	in	r18, 0x11	; 17
     69a:	01 80       	ldd	r0, Z+1	; 0x01
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <one_wire_check_presence+0x1da>
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	0a 94       	dec	r0
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <one_wire_check_presence+0x1d6>
     6a6:	80 95       	com	r24
     6a8:	82 23       	and	r24, r18
     6aa:	81 bb       	out	0x11, r24	; 17
     6ac:	87 e1       	ldi	r24, 0x17	; 23
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <one_wire_check_presence+0x1e8>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <one_wire_check_presence+0x1ee>
     6b6:	00 00       	nop
			/* Pause 70 us */
			_delay_us(70);
			
			/* Normally PIN should be pulled-down by a remote device */
			if ((PIND & (1 << pBus->pin)) == 0x0)
     6b8:	20 b3       	in	r18, 0x10	; 16
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	01 80       	ldd	r0, Z+1	; 0x01
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <one_wire_check_presence+0x1fc>
     6c0:	35 95       	asr	r19
     6c2:	27 95       	ror	r18
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <one_wire_check_presence+0x1f8>
	}

	return pData;
}

bool one_wire_check_presence(const one_wire_bus_data_t* pBus)
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	20 fd       	sbrc	r18, 0
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	a7 e6       	ldi	r26, 0x67	; 103
     6d0:	b6 e0       	ldi	r27, 0x06	; 6
     6d2:	11 97       	sbiw	r26, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <one_wire_check_presence+0x20a>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <one_wire_check_presence+0x210>
     6d8:	00 00       	nop
     6da:	08 95       	ret
{
	bool res = false;
     6dc:	80 e0       	ldi	r24, 0x00	; 0

			break;
	}

 return res;
}
     6de:	08 95       	ret

000006e0 <one_wire_send_command>:

void one_wire_send_command(const one_wire_bus_data_t* pBus, const unsigned char command)
{ 
     6e0:	fc 01       	movw	r30, r24
	unsigned char i, data;
 
	data = command;
     6e2:	48 e0       	ldi	r20, 0x08	; 8
				/* Pause 10 us */
				_delay_us(10);
				break;
			case ONE_WIRE_PORT_B:
				/* Mux PIN as pulled down output */
				DDRB |= 1 << pBus->pin;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
	data = command;
 
	for(i=0;i<8;i++)
	{

		if ((data&0x01)==0x01) 
     6e8:	60 ff       	sbrs	r22, 0
     6ea:	b4 c0       	rjmp	.+360    	; 0x854 <one_wire_send_command+0x174>
		{
			/* Send '1' to the bus */
			switch (pBus->port)
     6ec:	20 81       	ld	r18, Z
     6ee:	21 30       	cpi	r18, 0x01	; 1
     6f0:	99 f1       	breq	.+102    	; 0x758 <one_wire_send_command+0x78>
     6f2:	21 30       	cpi	r18, 0x01	; 1
     6f4:	38 f0       	brcs	.+14     	; 0x704 <one_wire_send_command+0x24>
     6f6:	22 30       	cpi	r18, 0x02	; 2
     6f8:	09 f4       	brne	.+2      	; 0x6fc <one_wire_send_command+0x1c>
     6fa:	58 c0       	rjmp	.+176    	; 0x7ac <one_wire_send_command+0xcc>
     6fc:	23 30       	cpi	r18, 0x03	; 3
     6fe:	09 f0       	breq	.+2      	; 0x702 <one_wire_send_command+0x22>
     700:	60 c1       	rjmp	.+704    	; 0x9c2 <__stack+0x163>
     702:	7e c0       	rjmp	.+252    	; 0x800 <one_wire_send_command+0x120>
			{
			case ONE_WIRE_PORT_A:
				/* Mux PIN as output */
				DDRA |= 1 << pBus->pin;
     704:	5a b3       	in	r21, 0x1a	; 26
     706:	9c 01       	movw	r18, r24
     708:	01 80       	ldd	r0, Z+1	; 0x01
     70a:	02 c0       	rjmp	.+4      	; 0x710 <one_wire_send_command+0x30>
     70c:	22 0f       	add	r18, r18
     70e:	33 1f       	adc	r19, r19
     710:	0a 94       	dec	r0
     712:	e2 f7       	brpl	.-8      	; 0x70c <one_wire_send_command+0x2c>
     714:	25 2b       	or	r18, r21
     716:	2a bb       	out	0x1a, r18	; 26
				PORTA &= ~(1 << pBus->pin);
     718:	5b b3       	in	r21, 0x1b	; 27
     71a:	9c 01       	movw	r18, r24
     71c:	01 80       	ldd	r0, Z+1	; 0x01
     71e:	02 c0       	rjmp	.+4      	; 0x724 <one_wire_send_command+0x44>
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <one_wire_send_command+0x40>
     728:	20 95       	com	r18
     72a:	25 23       	and	r18, r21
     72c:	2b bb       	out	0x1b, r18	; 27
     72e:	20 e2       	ldi	r18, 0x20	; 32
     730:	2a 95       	dec	r18
     732:	f1 f7       	brne	.-4      	; 0x730 <one_wire_send_command+0x50>
				/* Pause 6 us */
				_delay_us(6);
				/* Mux PIN as input (release bus) */
				DDRA &= ~(1 << pBus->pin);
     734:	5a b3       	in	r21, 0x1a	; 26
     736:	9c 01       	movw	r18, r24
     738:	01 80       	ldd	r0, Z+1	; 0x01
     73a:	02 c0       	rjmp	.+4      	; 0x740 <one_wire_send_command+0x60>
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	0a 94       	dec	r0
     742:	e2 f7       	brpl	.-8      	; 0x73c <one_wire_send_command+0x5c>
     744:	20 95       	com	r18
     746:	25 23       	and	r18, r21
     748:	2a bb       	out	0x1a, r18	; 26
     74a:	af ef       	ldi	r26, 0xFF	; 255
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	11 97       	sbiw	r26, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <one_wire_send_command+0x6e>
     752:	00 c0       	rjmp	.+0      	; 0x754 <one_wire_send_command+0x74>
     754:	00 00       	nop
     756:	35 c1       	rjmp	.+618    	; 0x9c2 <__stack+0x163>
				/* Pause 64 us */
				_delay_us(64);			
				break;
			case ONE_WIRE_PORT_B:
				/* Mux PIN as output */
				DDRB |= 1 << pBus->pin;
     758:	57 b3       	in	r21, 0x17	; 23
     75a:	9c 01       	movw	r18, r24
     75c:	01 80       	ldd	r0, Z+1	; 0x01
     75e:	02 c0       	rjmp	.+4      	; 0x764 <one_wire_send_command+0x84>
     760:	22 0f       	add	r18, r18
     762:	33 1f       	adc	r19, r19
     764:	0a 94       	dec	r0
     766:	e2 f7       	brpl	.-8      	; 0x760 <one_wire_send_command+0x80>
     768:	25 2b       	or	r18, r21
     76a:	27 bb       	out	0x17, r18	; 23
				PORTB &= ~(1 << pBus->pin);
     76c:	58 b3       	in	r21, 0x18	; 24
     76e:	9c 01       	movw	r18, r24
     770:	01 80       	ldd	r0, Z+1	; 0x01
     772:	02 c0       	rjmp	.+4      	; 0x778 <one_wire_send_command+0x98>
     774:	22 0f       	add	r18, r18
     776:	33 1f       	adc	r19, r19
     778:	0a 94       	dec	r0
     77a:	e2 f7       	brpl	.-8      	; 0x774 <one_wire_send_command+0x94>
     77c:	20 95       	com	r18
     77e:	25 23       	and	r18, r21
     780:	28 bb       	out	0x18, r18	; 24
     782:	b0 e2       	ldi	r27, 0x20	; 32
     784:	ba 95       	dec	r27
     786:	f1 f7       	brne	.-4      	; 0x784 <one_wire_send_command+0xa4>
				/* Pause 6 us */
				_delay_us(6);
				/* Mux PIN as input (release bus) */
				DDRB &= ~(1 << pBus->pin);
     788:	57 b3       	in	r21, 0x17	; 23
     78a:	9c 01       	movw	r18, r24
     78c:	01 80       	ldd	r0, Z+1	; 0x01
     78e:	02 c0       	rjmp	.+4      	; 0x794 <one_wire_send_command+0xb4>
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <one_wire_send_command+0xb0>
     798:	20 95       	com	r18
     79a:	25 23       	and	r18, r21
     79c:	27 bb       	out	0x17, r18	; 23
     79e:	af ef       	ldi	r26, 0xFF	; 255
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	11 97       	sbiw	r26, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <one_wire_send_command+0xc2>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <one_wire_send_command+0xc8>
     7a8:	00 00       	nop
     7aa:	0b c1       	rjmp	.+534    	; 0x9c2 <__stack+0x163>
				/* Pause 64 us */
				_delay_us(64);
				break;
			case ONE_WIRE_PORT_C:
				/* Mux PIN as output */
				DDRC |= 1 << pBus->pin;
     7ac:	54 b3       	in	r21, 0x14	; 20
     7ae:	9c 01       	movw	r18, r24
     7b0:	01 80       	ldd	r0, Z+1	; 0x01
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <one_wire_send_command+0xd8>
     7b4:	22 0f       	add	r18, r18
     7b6:	33 1f       	adc	r19, r19
     7b8:	0a 94       	dec	r0
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <one_wire_send_command+0xd4>
     7bc:	25 2b       	or	r18, r21
     7be:	24 bb       	out	0x14, r18	; 20
				PORTC &= ~(1 << pBus->pin);
     7c0:	55 b3       	in	r21, 0x15	; 21
     7c2:	9c 01       	movw	r18, r24
     7c4:	01 80       	ldd	r0, Z+1	; 0x01
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <one_wire_send_command+0xec>
     7c8:	22 0f       	add	r18, r18
     7ca:	33 1f       	adc	r19, r19
     7cc:	0a 94       	dec	r0
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <one_wire_send_command+0xe8>
     7d0:	20 95       	com	r18
     7d2:	25 23       	and	r18, r21
     7d4:	25 bb       	out	0x15, r18	; 21
     7d6:	b0 e2       	ldi	r27, 0x20	; 32
     7d8:	ba 95       	dec	r27
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <one_wire_send_command+0xf8>
				/* Pause 6 us */
				_delay_us(6);
				/* Mux PIN as input (release bus) */
				DDRC &= ~(1 << pBus->pin);
     7dc:	54 b3       	in	r21, 0x14	; 20
     7de:	9c 01       	movw	r18, r24
     7e0:	01 80       	ldd	r0, Z+1	; 0x01
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <one_wire_send_command+0x108>
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	0a 94       	dec	r0
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <one_wire_send_command+0x104>
     7ec:	20 95       	com	r18
     7ee:	25 23       	and	r18, r21
     7f0:	24 bb       	out	0x14, r18	; 20
     7f2:	af ef       	ldi	r26, 0xFF	; 255
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	11 97       	sbiw	r26, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <one_wire_send_command+0x116>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <one_wire_send_command+0x11c>
     7fc:	00 00       	nop
     7fe:	e1 c0       	rjmp	.+450    	; 0x9c2 <__stack+0x163>
				/* Pause 64 us */
				_delay_us(64);
				break;
			case ONE_WIRE_PORT_D:
				/* Mux PIN as output */
				DDRD |= 1 << pBus->pin;
     800:	51 b3       	in	r21, 0x11	; 17
     802:	9c 01       	movw	r18, r24
     804:	01 80       	ldd	r0, Z+1	; 0x01
     806:	02 c0       	rjmp	.+4      	; 0x80c <one_wire_send_command+0x12c>
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	0a 94       	dec	r0
     80e:	e2 f7       	brpl	.-8      	; 0x808 <one_wire_send_command+0x128>
     810:	25 2b       	or	r18, r21
     812:	21 bb       	out	0x11, r18	; 17
				PORTD &= ~(1 << pBus->pin);
     814:	52 b3       	in	r21, 0x12	; 18
     816:	9c 01       	movw	r18, r24
     818:	01 80       	ldd	r0, Z+1	; 0x01
     81a:	02 c0       	rjmp	.+4      	; 0x820 <one_wire_send_command+0x140>
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	0a 94       	dec	r0
     822:	e2 f7       	brpl	.-8      	; 0x81c <one_wire_send_command+0x13c>
     824:	20 95       	com	r18
     826:	25 23       	and	r18, r21
     828:	22 bb       	out	0x12, r18	; 18
     82a:	b0 e2       	ldi	r27, 0x20	; 32
     82c:	ba 95       	dec	r27
     82e:	f1 f7       	brne	.-4      	; 0x82c <one_wire_send_command+0x14c>
				/* Pause 6 us */
				_delay_us(6);
				/* Mux PIN as input (release bus) */
				DDRD &= ~(1 << pBus->pin);
     830:	51 b3       	in	r21, 0x11	; 17
     832:	9c 01       	movw	r18, r24
     834:	01 80       	ldd	r0, Z+1	; 0x01
     836:	02 c0       	rjmp	.+4      	; 0x83c <one_wire_send_command+0x15c>
     838:	22 0f       	add	r18, r18
     83a:	33 1f       	adc	r19, r19
     83c:	0a 94       	dec	r0
     83e:	e2 f7       	brpl	.-8      	; 0x838 <one_wire_send_command+0x158>
     840:	20 95       	com	r18
     842:	25 23       	and	r18, r21
     844:	21 bb       	out	0x11, r18	; 17
     846:	af ef       	ldi	r26, 0xFF	; 255
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	11 97       	sbiw	r26, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <one_wire_send_command+0x16a>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <one_wire_send_command+0x170>
     850:	00 00       	nop
     852:	b7 c0       	rjmp	.+366    	; 0x9c2 <__stack+0x163>
			}
        } 
		else 
        {
			/* Send '0' to the bus */
			switch (pBus->port)
     854:	20 81       	ld	r18, Z
     856:	21 30       	cpi	r18, 0x01	; 1
     858:	a1 f1       	breq	.+104    	; 0x8c2 <__stack+0x63>
     85a:	21 30       	cpi	r18, 0x01	; 1
     85c:	38 f0       	brcs	.+14     	; 0x86c <__stack+0xd>
     85e:	22 30       	cpi	r18, 0x02	; 2
     860:	09 f4       	brne	.+2      	; 0x864 <__stack+0x5>
     862:	5a c0       	rjmp	.+180    	; 0x918 <__stack+0xb9>
     864:	23 30       	cpi	r18, 0x03	; 3
     866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
     868:	ac c0       	rjmp	.+344    	; 0x9c2 <__stack+0x163>
     86a:	81 c0       	rjmp	.+258    	; 0x96e <__stack+0x10f>
			{
			case ONE_WIRE_PORT_A:
				/* Mux PIN as pulled down output */
				DDRA |= 1 << pBus->pin;
     86c:	5a b3       	in	r21, 0x1a	; 26
     86e:	9c 01       	movw	r18, r24
     870:	01 80       	ldd	r0, Z+1	; 0x01
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	0a 94       	dec	r0
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	25 2b       	or	r18, r21
     87e:	2a bb       	out	0x1a, r18	; 26
				PORTA &= ~(1 << pBus->pin);
     880:	5b b3       	in	r21, 0x1b	; 27
     882:	9c 01       	movw	r18, r24
     884:	01 80       	ldd	r0, Z+1	; 0x01
     886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	0a 94       	dec	r0
     88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
     890:	20 95       	com	r18
     892:	25 23       	and	r18, r21
     894:	2b bb       	out	0x1b, r18	; 27
     896:	af ee       	ldi	r26, 0xEF	; 239
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	11 97       	sbiw	r26, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <__stack+0x3b>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <__stack+0x41>
     8a0:	00 00       	nop
				/* Pause 60 us */
				_delay_us(60);
				/* Mux PIN as input (release bus) */
				DDRA &= ~(1 << pBus->pin);
     8a2:	5a b3       	in	r21, 0x1a	; 26
     8a4:	9c 01       	movw	r18, r24
     8a6:	01 80       	ldd	r0, Z+1	; 0x01
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
     8aa:	22 0f       	add	r18, r18
     8ac:	33 1f       	adc	r19, r19
     8ae:	0a 94       	dec	r0
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
     8b2:	20 95       	com	r18
     8b4:	25 23       	and	r18, r21
     8b6:	2a bb       	out	0x1a, r18	; 26
     8b8:	b5 e3       	ldi	r27, 0x35	; 53
     8ba:	ba 95       	dec	r27
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <__stack+0x5b>
     8be:	00 00       	nop
     8c0:	80 c0       	rjmp	.+256    	; 0x9c2 <__stack+0x163>
				/* Pause 10 us */
				_delay_us(10);
				break;
			case ONE_WIRE_PORT_B:
				/* Mux PIN as pulled down output */
				DDRB |= 1 << pBus->pin;
     8c2:	57 b3       	in	r21, 0x17	; 23
     8c4:	9c 01       	movw	r18, r24
     8c6:	01 80       	ldd	r0, Z+1	; 0x01
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
     8ca:	22 0f       	add	r18, r18
     8cc:	33 1f       	adc	r19, r19
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
     8d2:	25 2b       	or	r18, r21
     8d4:	27 bb       	out	0x17, r18	; 23
				PORTB &= ~(1 << pBus->pin);
     8d6:	58 b3       	in	r21, 0x18	; 24
     8d8:	9c 01       	movw	r18, r24
     8da:	01 80       	ldd	r0, Z+1	; 0x01
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	0a 94       	dec	r0
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <__stack+0x7f>
     8e6:	20 95       	com	r18
     8e8:	25 23       	and	r18, r21
     8ea:	28 bb       	out	0x18, r18	; 24
     8ec:	af ee       	ldi	r26, 0xEF	; 239
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	11 97       	sbiw	r26, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__stack+0x91>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
     8f6:	00 00       	nop
				/* Pause 60 us */
				_delay_us(60);
				/* Mux PIN as input (release bus) */
				DDRB &= ~(1 << pBus->pin);
     8f8:	57 b3       	in	r21, 0x17	; 23
     8fa:	9c 01       	movw	r18, r24
     8fc:	01 80       	ldd	r0, Z+1	; 0x01
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0xa5>
     900:	22 0f       	add	r18, r18
     902:	33 1f       	adc	r19, r19
     904:	0a 94       	dec	r0
     906:	e2 f7       	brpl	.-8      	; 0x900 <__stack+0xa1>
     908:	20 95       	com	r18
     90a:	25 23       	and	r18, r21
     90c:	27 bb       	out	0x17, r18	; 23
     90e:	b5 e3       	ldi	r27, 0x35	; 53
     910:	ba 95       	dec	r27
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0xb1>
     914:	00 00       	nop
     916:	55 c0       	rjmp	.+170    	; 0x9c2 <__stack+0x163>
				/* Pause 10 us */
				_delay_us(10);
				break;
			case ONE_WIRE_PORT_C:
				/* Mux PIN as pulled down output */
				DDRC |= 1 << pBus->pin;
     918:	54 b3       	in	r21, 0x14	; 20
     91a:	9c 01       	movw	r18, r24
     91c:	01 80       	ldd	r0, Z+1	; 0x01
     91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
     920:	22 0f       	add	r18, r18
     922:	33 1f       	adc	r19, r19
     924:	0a 94       	dec	r0
     926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
     928:	25 2b       	or	r18, r21
     92a:	24 bb       	out	0x14, r18	; 20
				PORTC &= ~(1 << pBus->pin);
     92c:	55 b3       	in	r21, 0x15	; 21
     92e:	9c 01       	movw	r18, r24
     930:	01 80       	ldd	r0, Z+1	; 0x01
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0xd9>
     934:	22 0f       	add	r18, r18
     936:	33 1f       	adc	r19, r19
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <__stack+0xd5>
     93c:	20 95       	com	r18
     93e:	25 23       	and	r18, r21
     940:	25 bb       	out	0x15, r18	; 21
     942:	af ee       	ldi	r26, 0xEF	; 239
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	11 97       	sbiw	r26, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <__stack+0xe7>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <__stack+0xed>
     94c:	00 00       	nop
				/* Pause 60 us */
				_delay_us(60);
				/* Mux PIN as input (release bus) */
				DDRC &= ~(1 << pBus->pin);
     94e:	54 b3       	in	r21, 0x14	; 20
     950:	9c 01       	movw	r18, r24
     952:	01 80       	ldd	r0, Z+1	; 0x01
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
     956:	22 0f       	add	r18, r18
     958:	33 1f       	adc	r19, r19
     95a:	0a 94       	dec	r0
     95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
     95e:	20 95       	com	r18
     960:	25 23       	and	r18, r21
     962:	24 bb       	out	0x14, r18	; 20
     964:	b5 e3       	ldi	r27, 0x35	; 53
     966:	ba 95       	dec	r27
     968:	f1 f7       	brne	.-4      	; 0x966 <__stack+0x107>
     96a:	00 00       	nop
     96c:	2a c0       	rjmp	.+84     	; 0x9c2 <__stack+0x163>
				/* Pause 10 us */
				_delay_us(10);
				break;
			case ONE_WIRE_PORT_D:
				/* Mux PIN as pulled down output */
				DDRD |= 1 << pBus->pin;
     96e:	51 b3       	in	r21, 0x11	; 17
     970:	9c 01       	movw	r18, r24
     972:	01 80       	ldd	r0, Z+1	; 0x01
     974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x11b>
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	0a 94       	dec	r0
     97c:	e2 f7       	brpl	.-8      	; 0x976 <__stack+0x117>
     97e:	25 2b       	or	r18, r21
     980:	21 bb       	out	0x11, r18	; 17
				PORTD &= ~(1 << pBus->pin);
     982:	52 b3       	in	r21, 0x12	; 18
     984:	9c 01       	movw	r18, r24
     986:	01 80       	ldd	r0, Z+1	; 0x01
     988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x12f>
     98a:	22 0f       	add	r18, r18
     98c:	33 1f       	adc	r19, r19
     98e:	0a 94       	dec	r0
     990:	e2 f7       	brpl	.-8      	; 0x98a <__stack+0x12b>
     992:	20 95       	com	r18
     994:	25 23       	and	r18, r21
     996:	22 bb       	out	0x12, r18	; 18
     998:	af ee       	ldi	r26, 0xEF	; 239
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <__stack+0x13d>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <__stack+0x143>
     9a2:	00 00       	nop
				/* Pause 60 us */
				_delay_us(60);
				/* Mux PIN as input (release bus) */
				DDRD &= ~(1 << pBus->pin);
     9a4:	51 b3       	in	r21, 0x11	; 17
     9a6:	9c 01       	movw	r18, r24
     9a8:	01 80       	ldd	r0, Z+1	; 0x01
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0x151>
     9ac:	22 0f       	add	r18, r18
     9ae:	33 1f       	adc	r19, r19
     9b0:	0a 94       	dec	r0
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <__stack+0x14d>
     9b4:	20 95       	com	r18
     9b6:	25 23       	and	r18, r21
     9b8:	21 bb       	out	0x11, r18	; 17
     9ba:	b5 e3       	ldi	r27, 0x35	; 53
     9bc:	ba 95       	dec	r27
     9be:	f1 f7       	brne	.-4      	; 0x9bc <__stack+0x15d>
     9c0:	00 00       	nop
     9c2:	41 50       	subi	r20, 0x01	; 1
{ 
	unsigned char i, data;
 
	data = command;
 
	for(i=0;i<8;i++)
     9c4:	11 f0       	breq	.+4      	; 0x9ca <__stack+0x16b>
				/* Pause 10 us */
				_delay_us(10);
				break;
			}
        }
  		data=data>>1;
     9c6:	66 95       	lsr	r22
     9c8:	8f ce       	rjmp	.-738    	; 0x6e8 <one_wire_send_command+0x8>
     9ca:	08 95       	ret

000009cc <one_wire_send_command_wait_done>:
	}
}

void one_wire_send_command_wait_done(const one_wire_bus_data_t* pBus, const unsigned char command, const uint16_t max_timeout_us)
{ 
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
     9d6:	8a 01       	movw	r16, r20
	uint16_t wait_loops = 0;

	one_wire_send_command(pBus, command);
     9d8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <one_wire_send_command>

	/* As per the spec remote device will hold "0" on the bus until handling is in progress, so we will be waiting for "1" */
	switch (pBus->port)
     9dc:	88 81       	ld	r24, Y
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	21 f1       	breq	.+72     	; 0xa2a <one_wire_send_command_wait_done+0x5e>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	80 f1       	brcs	.+96     	; 0xa46 <one_wire_send_command_wait_done+0x7a>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	91 f0       	breq	.+36     	; 0xa0e <one_wire_send_command_wait_done+0x42>
     9ea:	83 30       	cpi	r24, 0x03	; 3
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <one_wire_send_command_wait_done+0x24>
     9ee:	73 c0       	rjmp	.+230    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
			_delay_us(1);
			//wait_loops++;
		}
		break;
	case ONE_WIRE_PORT_D:
		while (((PIND & (1 << pBus->pin)) == 0x0) && (wait_loops != max_timeout_us))
     9f0:	80 b3       	in	r24, 0x10	; 16
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	09 80       	ldd	r0, Y+1	; 0x01
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <one_wire_send_command_wait_done+0x30>
     9f8:	95 95       	asr	r25
     9fa:	87 95       	ror	r24
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <one_wire_send_command_wait_done+0x2c>
     a00:	80 fd       	sbrc	r24, 0
     a02:	69 c0       	rjmp	.+210    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     a04:	01 15       	cp	r16, r1
     a06:	11 05       	cpc	r17, r1
     a08:	09 f0       	breq	.+2      	; 0xa0c <one_wire_send_command_wait_done+0x40>
     a0a:	57 c0       	rjmp	.+174    	; 0xaba <one_wire_send_command_wait_done+0xee>
     a0c:	64 c0       	rjmp	.+200    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
			_delay_us(1);
			//wait_loops++;
		}
		break;
	case ONE_WIRE_PORT_C:
		while (((PINC & (1 << pBus->pin)) == 0x0) && (wait_loops != max_timeout_us))
     a0e:	83 b3       	in	r24, 0x13	; 19
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	09 80       	ldd	r0, Y+1	; 0x01
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <one_wire_send_command_wait_done+0x4e>
     a16:	95 95       	asr	r25
     a18:	87 95       	ror	r24
     a1a:	0a 94       	dec	r0
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <one_wire_send_command_wait_done+0x4a>
     a1e:	80 fd       	sbrc	r24, 0
     a20:	5a c0       	rjmp	.+180    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     a22:	01 15       	cp	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	d1 f5       	brne	.+116    	; 0xa9c <one_wire_send_command_wait_done+0xd0>
     a28:	56 c0       	rjmp	.+172    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
			_delay_us(1);
			//wait_loops++;
		}
		break;
	case ONE_WIRE_PORT_B:
		while (((PINB & (1 << pBus->pin)) == 0x0) && (wait_loops != max_timeout_us))
     a2a:	86 b3       	in	r24, 0x16	; 22
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	09 80       	ldd	r0, Y+1	; 0x01
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <one_wire_send_command_wait_done+0x6a>
     a32:	95 95       	asr	r25
     a34:	87 95       	ror	r24
     a36:	0a 94       	dec	r0
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <one_wire_send_command_wait_done+0x66>
     a3a:	80 fd       	sbrc	r24, 0
     a3c:	4c c0       	rjmp	.+152    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     a3e:	01 15       	cp	r16, r1
     a40:	11 05       	cpc	r17, r1
     a42:	e9 f4       	brne	.+58     	; 0xa7e <one_wire_send_command_wait_done+0xb2>
     a44:	48 c0       	rjmp	.+144    	; 0xad6 <one_wire_send_command_wait_done+0x10a>

	/* As per the spec remote device will hold "0" on the bus until handling is in progress, so we will be waiting for "1" */
	switch (pBus->port)
	{
	case ONE_WIRE_PORT_A:
		while (((PINA & (1 << pBus->pin)) == 0x0) && (wait_loops != max_timeout_us))
     a46:	89 b3       	in	r24, 0x19	; 25
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	09 80       	ldd	r0, Y+1	; 0x01
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <one_wire_send_command_wait_done+0x86>
     a4e:	95 95       	asr	r25
     a50:	87 95       	ror	r24
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <one_wire_send_command_wait_done+0x82>
     a56:	80 fd       	sbrc	r24, 0
     a58:	3e c0       	rjmp	.+124    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     a5a:	01 15       	cp	r16, r1
     a5c:	11 05       	cpc	r17, r1
     a5e:	d9 f1       	breq	.+118    	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     a60:	85 e0       	ldi	r24, 0x05	; 5
     a62:	8a 95       	dec	r24
     a64:	f1 f7       	brne	.-4      	; 0xa62 <one_wire_send_command_wait_done+0x96>
     a66:	00 00       	nop
     a68:	89 b3       	in	r24, 0x19	; 25
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	09 80       	ldd	r0, Y+1	; 0x01
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <one_wire_send_command_wait_done+0xa8>
     a70:	95 95       	asr	r25
     a72:	87 95       	ror	r24
     a74:	0a 94       	dec	r0
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <one_wire_send_command_wait_done+0xa4>
     a78:	80 ff       	sbrs	r24, 0
     a7a:	f2 cf       	rjmp	.-28     	; 0xa60 <one_wire_send_command_wait_done+0x94>
     a7c:	2c c0       	rjmp	.+88     	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     a7e:	85 e0       	ldi	r24, 0x05	; 5
     a80:	8a 95       	dec	r24
     a82:	f1 f7       	brne	.-4      	; 0xa80 <one_wire_send_command_wait_done+0xb4>
     a84:	00 00       	nop
			_delay_us(1);
			//wait_loops++;
		}
		break;
	case ONE_WIRE_PORT_B:
		while (((PINB & (1 << pBus->pin)) == 0x0) && (wait_loops != max_timeout_us))
     a86:	86 b3       	in	r24, 0x16	; 22
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	09 80       	ldd	r0, Y+1	; 0x01
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <one_wire_send_command_wait_done+0xc6>
     a8e:	95 95       	asr	r25
     a90:	87 95       	ror	r24
     a92:	0a 94       	dec	r0
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <one_wire_send_command_wait_done+0xc2>
     a96:	80 ff       	sbrs	r24, 0
     a98:	f2 cf       	rjmp	.-28     	; 0xa7e <one_wire_send_command_wait_done+0xb2>
     a9a:	1d c0       	rjmp	.+58     	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     a9c:	85 e0       	ldi	r24, 0x05	; 5
     a9e:	8a 95       	dec	r24
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <one_wire_send_command_wait_done+0xd2>
     aa2:	00 00       	nop
			_delay_us(1);
			//wait_loops++;
		}
		break;
	case ONE_WIRE_PORT_C:
		while (((PINC & (1 << pBus->pin)) == 0x0) && (wait_loops != max_timeout_us))
     aa4:	83 b3       	in	r24, 0x13	; 19
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	09 80       	ldd	r0, Y+1	; 0x01
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <one_wire_send_command_wait_done+0xe4>
     aac:	95 95       	asr	r25
     aae:	87 95       	ror	r24
     ab0:	0a 94       	dec	r0
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <one_wire_send_command_wait_done+0xe0>
     ab4:	80 ff       	sbrs	r24, 0
     ab6:	f2 cf       	rjmp	.-28     	; 0xa9c <one_wire_send_command_wait_done+0xd0>
     ab8:	0e c0       	rjmp	.+28     	; 0xad6 <one_wire_send_command_wait_done+0x10a>
     aba:	85 e0       	ldi	r24, 0x05	; 5
     abc:	8a 95       	dec	r24
     abe:	f1 f7       	brne	.-4      	; 0xabc <one_wire_send_command_wait_done+0xf0>
     ac0:	00 00       	nop
			_delay_us(1);
			//wait_loops++;
		}
		break;
	case ONE_WIRE_PORT_D:
		while (((PIND & (1 << pBus->pin)) == 0x0) && (wait_loops != max_timeout_us))
     ac2:	80 b3       	in	r24, 0x10	; 16
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	09 80       	ldd	r0, Y+1	; 0x01
     ac8:	02 c0       	rjmp	.+4      	; 0xace <one_wire_send_command_wait_done+0x102>
     aca:	95 95       	asr	r25
     acc:	87 95       	ror	r24
     ace:	0a 94       	dec	r0
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <one_wire_send_command_wait_done+0xfe>
     ad2:	80 ff       	sbrs	r24, 0
     ad4:	f2 cf       	rjmp	.-28     	; 0xaba <one_wire_send_command_wait_done+0xee>
			_delay_us(1);
			//wait_loops++;
		}
		break;
	}
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	08 95       	ret

00000ae0 <one_wire_receive_data>:


uint16_t one_wire_receive_data(const one_wire_bus_data_t* pBus)
{
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char bit_counter;
	uint16_t out_val = 0;
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
			/* Pause 55 us */
  			_delay_us(55);		
			break;
		case ONE_WIRE_PORT_B:
		 	/* Mux PIN as pulled down output */
			DDRB |= 1 << pBus->pin;
     aea:	41 e0       	ldi	r20, 0x01	; 1
     aec:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t out_val = 0;

 	/* Receive 16 bits from the bus */
	for(bit_counter=0;bit_counter<16;bit_counter++)
	{
		switch (pBus->port)
     aee:	60 81       	ld	r22, Z
     af0:	61 30       	cpi	r22, 0x01	; 1
     af2:	09 f4       	brne	.+2      	; 0xaf6 <one_wire_receive_data+0x16>
     af4:	55 c0       	rjmp	.+170    	; 0xba0 <one_wire_receive_data+0xc0>
     af6:	61 30       	cpi	r22, 0x01	; 1
     af8:	38 f0       	brcs	.+14     	; 0xb08 <one_wire_receive_data+0x28>
     afa:	62 30       	cpi	r22, 0x02	; 2
     afc:	09 f4       	brne	.+2      	; 0xb00 <one_wire_receive_data+0x20>
     afe:	9c c0       	rjmp	.+312    	; 0xc38 <one_wire_receive_data+0x158>
     b00:	63 30       	cpi	r22, 0x03	; 3
     b02:	09 f0       	breq	.+2      	; 0xb06 <one_wire_receive_data+0x26>
     b04:	30 c1       	rjmp	.+608    	; 0xd66 <one_wire_receive_data+0x286>
     b06:	e4 c0       	rjmp	.+456    	; 0xcd0 <one_wire_receive_data+0x1f0>
		{
		case ONE_WIRE_PORT_A:
		 	/* Mux PIN as pulled down output */
			DDRA |= 1 << pBus->pin;
     b08:	aa b3       	in	r26, 0x1a	; 26
     b0a:	ba 01       	movw	r22, r20
     b0c:	01 80       	ldd	r0, Z+1	; 0x01
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <one_wire_receive_data+0x34>
     b10:	66 0f       	add	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	0a 94       	dec	r0
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <one_wire_receive_data+0x30>
     b18:	6a 2b       	or	r22, r26
     b1a:	6a bb       	out	0x1a, r22	; 26
			PORTA &= ~(1 << pBus->pin);
     b1c:	ab b3       	in	r26, 0x1b	; 27
     b1e:	ba 01       	movw	r22, r20
     b20:	01 80       	ldd	r0, Z+1	; 0x01
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <one_wire_receive_data+0x48>
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	0a 94       	dec	r0
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <one_wire_receive_data+0x44>
     b2c:	60 95       	com	r22
     b2e:	6a 23       	and	r22, r26
     b30:	6b bb       	out	0x1b, r22	; 27
     b32:	60 e2       	ldi	r22, 0x20	; 32
     b34:	6a 95       	dec	r22
     b36:	f1 f7       	brne	.-4      	; 0xb34 <one_wire_receive_data+0x54>
			/* Pause 6 us */
	  		_delay_us(6);
			/* Mux PIN as input (release bus) */
			DDRA &= ~(1 << pBus->pin);
     b38:	aa b3       	in	r26, 0x1a	; 26
     b3a:	ba 01       	movw	r22, r20
     b3c:	01 80       	ldd	r0, Z+1	; 0x01
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <one_wire_receive_data+0x64>
     b40:	66 0f       	add	r22, r22
     b42:	77 1f       	adc	r23, r23
     b44:	0a 94       	dec	r0
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <one_wire_receive_data+0x60>
     b48:	60 95       	com	r22
     b4a:	6a 23       	and	r22, r26
     b4c:	6a bb       	out	0x1a, r22	; 26
     b4e:	a0 e3       	ldi	r26, 0x30	; 48
     b50:	aa 95       	dec	r26
     b52:	f1 f7       	brne	.-4      	; 0xb50 <one_wire_receive_data+0x70>
			/* Pause 9 us */
  			_delay_us(9);
 
  			if ((PINA & (1 << pBus->pin)) == 0x0)
     b54:	69 b3       	in	r22, 0x19	; 25
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	01 80       	ldd	r0, Z+1	; 0x01
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <one_wire_receive_data+0x80>
     b5c:	75 95       	asr	r23
     b5e:	67 95       	ror	r22
     b60:	0a 94       	dec	r0
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <one_wire_receive_data+0x7c>
     b64:	60 fd       	sbrc	r22, 0
     b66:	0c c0       	rjmp	.+24     	; 0xb80 <one_wire_receive_data+0xa0>
				out_val &= ~(1<<bit_counter); // 0 on the bus
     b68:	ba 01       	movw	r22, r20
     b6a:	08 2e       	mov	r0, r24
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <one_wire_receive_data+0x92>
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	0a 94       	dec	r0
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <one_wire_receive_data+0x8e>
     b76:	60 95       	com	r22
     b78:	70 95       	com	r23
     b7a:	26 23       	and	r18, r22
     b7c:	37 23       	and	r19, r23
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <one_wire_receive_data+0xb2>
			else 
				out_val |= 1<<bit_counter;	// 1 on the bus
     b80:	ba 01       	movw	r22, r20
     b82:	08 2e       	mov	r0, r24
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <one_wire_receive_data+0xaa>
     b86:	66 0f       	add	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <one_wire_receive_data+0xa6>
     b8e:	26 2b       	or	r18, r22
     b90:	37 2b       	or	r19, r23
     b92:	ab ed       	ldi	r26, 0xDB	; 219
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	11 97       	sbiw	r26, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <one_wire_receive_data+0xb6>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <one_wire_receive_data+0xbc>
     b9c:	00 00       	nop
     b9e:	e3 c0       	rjmp	.+454    	; 0xd66 <one_wire_receive_data+0x286>
			/* Pause 55 us */
  			_delay_us(55);		
			break;
		case ONE_WIRE_PORT_B:
		 	/* Mux PIN as pulled down output */
			DDRB |= 1 << pBus->pin;
     ba0:	a7 b3       	in	r26, 0x17	; 23
     ba2:	ba 01       	movw	r22, r20
     ba4:	01 80       	ldd	r0, Z+1	; 0x01
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <one_wire_receive_data+0xcc>
     ba8:	66 0f       	add	r22, r22
     baa:	77 1f       	adc	r23, r23
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <one_wire_receive_data+0xc8>
     bb0:	6a 2b       	or	r22, r26
     bb2:	67 bb       	out	0x17, r22	; 23
			PORTB &= ~(1 << pBus->pin);
     bb4:	a8 b3       	in	r26, 0x18	; 24
     bb6:	ba 01       	movw	r22, r20
     bb8:	01 80       	ldd	r0, Z+1	; 0x01
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <one_wire_receive_data+0xe0>
     bbc:	66 0f       	add	r22, r22
     bbe:	77 1f       	adc	r23, r23
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <one_wire_receive_data+0xdc>
     bc4:	60 95       	com	r22
     bc6:	6a 23       	and	r22, r26
     bc8:	68 bb       	out	0x18, r22	; 24
     bca:	b0 e2       	ldi	r27, 0x20	; 32
     bcc:	ba 95       	dec	r27
     bce:	f1 f7       	brne	.-4      	; 0xbcc <one_wire_receive_data+0xec>
			/* Pause 6 us */
	  		_delay_us(6);
			/* Mux PIN as input (release bus) */
			DDRB &= ~(1 << pBus->pin);
     bd0:	a7 b3       	in	r26, 0x17	; 23
     bd2:	ba 01       	movw	r22, r20
     bd4:	01 80       	ldd	r0, Z+1	; 0x01
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <one_wire_receive_data+0xfc>
     bd8:	66 0f       	add	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <one_wire_receive_data+0xf8>
     be0:	60 95       	com	r22
     be2:	6a 23       	and	r22, r26
     be4:	67 bb       	out	0x17, r22	; 23
     be6:	60 e3       	ldi	r22, 0x30	; 48
     be8:	6a 95       	dec	r22
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <one_wire_receive_data+0x108>
			/* Pause 9 us */
  			_delay_us(9);
 
  			if ((PINB & (1 << pBus->pin)) == 0x0)
     bec:	66 b3       	in	r22, 0x16	; 22
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	01 80       	ldd	r0, Z+1	; 0x01
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <one_wire_receive_data+0x118>
     bf4:	75 95       	asr	r23
     bf6:	67 95       	ror	r22
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <one_wire_receive_data+0x114>
     bfc:	60 fd       	sbrc	r22, 0
     bfe:	0c c0       	rjmp	.+24     	; 0xc18 <one_wire_receive_data+0x138>
				out_val &= ~(1<<bit_counter); // 0 on the bus
     c00:	ba 01       	movw	r22, r20
     c02:	08 2e       	mov	r0, r24
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <one_wire_receive_data+0x12a>
     c06:	66 0f       	add	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <one_wire_receive_data+0x126>
     c0e:	60 95       	com	r22
     c10:	70 95       	com	r23
     c12:	26 23       	and	r18, r22
     c14:	37 23       	and	r19, r23
     c16:	09 c0       	rjmp	.+18     	; 0xc2a <one_wire_receive_data+0x14a>
			else 
				out_val |= 1<<bit_counter;	// 1 on the bus
     c18:	ba 01       	movw	r22, r20
     c1a:	08 2e       	mov	r0, r24
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <one_wire_receive_data+0x142>
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <one_wire_receive_data+0x13e>
     c26:	26 2b       	or	r18, r22
     c28:	37 2b       	or	r19, r23
     c2a:	ab ed       	ldi	r26, 0xDB	; 219
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	11 97       	sbiw	r26, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <one_wire_receive_data+0x14e>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <one_wire_receive_data+0x154>
     c34:	00 00       	nop
     c36:	97 c0       	rjmp	.+302    	; 0xd66 <one_wire_receive_data+0x286>
			/* Pause 55 us */
  			_delay_us(55);
			break;
		case ONE_WIRE_PORT_C:
			/* Mux PIN as pulled down output */
			DDRC |= 1 << pBus->pin;
     c38:	a4 b3       	in	r26, 0x14	; 20
     c3a:	ba 01       	movw	r22, r20
     c3c:	01 80       	ldd	r0, Z+1	; 0x01
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <one_wire_receive_data+0x164>
     c40:	66 0f       	add	r22, r22
     c42:	77 1f       	adc	r23, r23
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <one_wire_receive_data+0x160>
     c48:	6a 2b       	or	r22, r26
     c4a:	64 bb       	out	0x14, r22	; 20
			PORTC &= ~(1 << pBus->pin);
     c4c:	a5 b3       	in	r26, 0x15	; 21
     c4e:	ba 01       	movw	r22, r20
     c50:	01 80       	ldd	r0, Z+1	; 0x01
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <one_wire_receive_data+0x178>
     c54:	66 0f       	add	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <one_wire_receive_data+0x174>
     c5c:	60 95       	com	r22
     c5e:	6a 23       	and	r22, r26
     c60:	65 bb       	out	0x15, r22	; 21
     c62:	b0 e2       	ldi	r27, 0x20	; 32
     c64:	ba 95       	dec	r27
     c66:	f1 f7       	brne	.-4      	; 0xc64 <one_wire_receive_data+0x184>
			/* Pause 6 us */
	  		_delay_us(6);
			/* Mux PIN as input (release bus) */
			DDRC &= ~(1 << pBus->pin);
     c68:	a4 b3       	in	r26, 0x14	; 20
     c6a:	ba 01       	movw	r22, r20
     c6c:	01 80       	ldd	r0, Z+1	; 0x01
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <one_wire_receive_data+0x194>
     c70:	66 0f       	add	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <one_wire_receive_data+0x190>
     c78:	60 95       	com	r22
     c7a:	6a 23       	and	r22, r26
     c7c:	64 bb       	out	0x14, r22	; 20
     c7e:	60 e3       	ldi	r22, 0x30	; 48
     c80:	6a 95       	dec	r22
     c82:	f1 f7       	brne	.-4      	; 0xc80 <one_wire_receive_data+0x1a0>
			/* Pause 9 us */
  			_delay_us(9);
 
  			if ((PINC & (1 << pBus->pin)) == 0x0)
     c84:	63 b3       	in	r22, 0x13	; 19
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	01 80       	ldd	r0, Z+1	; 0x01
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <one_wire_receive_data+0x1b0>
     c8c:	75 95       	asr	r23
     c8e:	67 95       	ror	r22
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <one_wire_receive_data+0x1ac>
     c94:	60 fd       	sbrc	r22, 0
     c96:	0c c0       	rjmp	.+24     	; 0xcb0 <one_wire_receive_data+0x1d0>
				out_val &= ~(1<<bit_counter); // 0 on the bus
     c98:	ba 01       	movw	r22, r20
     c9a:	08 2e       	mov	r0, r24
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <one_wire_receive_data+0x1c2>
     c9e:	66 0f       	add	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <one_wire_receive_data+0x1be>
     ca6:	60 95       	com	r22
     ca8:	70 95       	com	r23
     caa:	26 23       	and	r18, r22
     cac:	37 23       	and	r19, r23
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <one_wire_receive_data+0x1e2>
			else 
				out_val |= 1<<bit_counter;	// 1 on the bus
     cb0:	ba 01       	movw	r22, r20
     cb2:	08 2e       	mov	r0, r24
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <one_wire_receive_data+0x1da>
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <one_wire_receive_data+0x1d6>
     cbe:	26 2b       	or	r18, r22
     cc0:	37 2b       	or	r19, r23
     cc2:	ab ed       	ldi	r26, 0xDB	; 219
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	11 97       	sbiw	r26, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <one_wire_receive_data+0x1e6>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <one_wire_receive_data+0x1ec>
     ccc:	00 00       	nop
     cce:	4b c0       	rjmp	.+150    	; 0xd66 <one_wire_receive_data+0x286>
			/* Pause 55 us */
  			_delay_us(55);
			break;
		case ONE_WIRE_PORT_D:
		 	/* Mux PIN as pulled down output */
			DDRD |= 1 << pBus->pin;
     cd0:	a1 b3       	in	r26, 0x11	; 17
     cd2:	ba 01       	movw	r22, r20
     cd4:	01 80       	ldd	r0, Z+1	; 0x01
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <one_wire_receive_data+0x1fc>
     cd8:	66 0f       	add	r22, r22
     cda:	77 1f       	adc	r23, r23
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <one_wire_receive_data+0x1f8>
     ce0:	6a 2b       	or	r22, r26
     ce2:	61 bb       	out	0x11, r22	; 17
			PORTD &= ~(1 << pBus->pin);
     ce4:	a2 b3       	in	r26, 0x12	; 18
     ce6:	ba 01       	movw	r22, r20
     ce8:	01 80       	ldd	r0, Z+1	; 0x01
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <one_wire_receive_data+0x210>
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <one_wire_receive_data+0x20c>
     cf4:	60 95       	com	r22
     cf6:	6a 23       	and	r22, r26
     cf8:	62 bb       	out	0x12, r22	; 18
     cfa:	b0 e2       	ldi	r27, 0x20	; 32
     cfc:	ba 95       	dec	r27
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <one_wire_receive_data+0x21c>
			/* Pause 6 us */
	  		_delay_us(6);
			/* Mux PIN as input (release bus) */
			DDRD &= ~(1 << pBus->pin);
     d00:	a1 b3       	in	r26, 0x11	; 17
     d02:	ba 01       	movw	r22, r20
     d04:	01 80       	ldd	r0, Z+1	; 0x01
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <one_wire_receive_data+0x22c>
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <one_wire_receive_data+0x228>
     d10:	60 95       	com	r22
     d12:	6a 23       	and	r22, r26
     d14:	61 bb       	out	0x11, r22	; 17
     d16:	60 e3       	ldi	r22, 0x30	; 48
     d18:	6a 95       	dec	r22
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <one_wire_receive_data+0x238>
			/* Pause 9 us */
  			_delay_us(9);
 
  			if ((PIND & (1 << pBus->pin)) == 0x0)
     d1c:	60 b3       	in	r22, 0x10	; 16
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	01 80       	ldd	r0, Z+1	; 0x01
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <one_wire_receive_data+0x248>
     d24:	75 95       	asr	r23
     d26:	67 95       	ror	r22
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <one_wire_receive_data+0x244>
     d2c:	60 fd       	sbrc	r22, 0
     d2e:	0c c0       	rjmp	.+24     	; 0xd48 <one_wire_receive_data+0x268>
				out_val &= ~(1<<bit_counter); // 0 on the bus
     d30:	ba 01       	movw	r22, r20
     d32:	08 2e       	mov	r0, r24
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <one_wire_receive_data+0x25a>
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <one_wire_receive_data+0x256>
     d3e:	60 95       	com	r22
     d40:	70 95       	com	r23
     d42:	26 23       	and	r18, r22
     d44:	37 23       	and	r19, r23
     d46:	09 c0       	rjmp	.+18     	; 0xd5a <one_wire_receive_data+0x27a>
			else 
				out_val |= 1<<bit_counter;	// 1 on the bus
     d48:	ba 01       	movw	r22, r20
     d4a:	08 2e       	mov	r0, r24
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <one_wire_receive_data+0x272>
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <one_wire_receive_data+0x26e>
     d56:	26 2b       	or	r18, r22
     d58:	37 2b       	or	r19, r23
     d5a:	ab ed       	ldi	r26, 0xDB	; 219
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	11 97       	sbiw	r26, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <one_wire_receive_data+0x27e>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <one_wire_receive_data+0x284>
     d64:	00 00       	nop
     d66:	01 96       	adiw	r24, 0x01	; 1
{
	unsigned char bit_counter;
	uint16_t out_val = 0;

 	/* Receive 16 bits from the bus */
	for(bit_counter=0;bit_counter<16;bit_counter++)
     d68:	80 31       	cpi	r24, 0x10	; 16
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f0       	breq	.+2      	; 0xd70 <one_wire_receive_data+0x290>
     d6e:	bf ce       	rjmp	.-642    	; 0xaee <one_wire_receive_data+0xe>
		break;
		}
	}

	return out_val;
}
     d70:	82 2f       	mov	r24, r18
     d72:	93 2f       	mov	r25, r19
     d74:	08 95       	ret

00000d76 <one_wire_temperature_convert>:

void one_wire_temperature_convert(one_wire_temperature_data_t* pTempData, uint16_t sourceData)
{
     d76:	fc 01       	movw	r30, r24
	if (NULL != pTempData)
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	c1 f0       	breq	.+48     	; 0xdac <one_wire_temperature_convert+0x36>
	{
			/* Read sign bit */
			pTempData->is_positive = (((sourceData & (1 << 11)) == 1) ? ONE_WIRE_TEMPERATURE_NEGATIVE : ONE_WIRE_TEMPERATURE_POSITIVE);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 83       	st	Z, r24
			
			/* Calculate base */
			pTempData->degree_base = (sourceData & 0x7ff) >> 4;
     d80:	cb 01       	movw	r24, r22
     d82:	97 70       	andi	r25, 0x07	; 7
     d84:	92 95       	swap	r25
     d86:	82 95       	swap	r24
     d88:	8f 70       	andi	r24, 0x0F	; 15
     d8a:	89 27       	eor	r24, r25
     d8c:	9f 70       	andi	r25, 0x0F	; 15
     d8e:	89 27       	eor	r24, r25
     d90:	81 83       	std	Z+1, r24	; 0x01
			
			/* Calculate mantissa */
			pTempData->degree_mantissa = (sourceData & 0xf) * 625;
     d92:	6f 70       	andi	r22, 0x0F	; 15
     d94:	70 70       	andi	r23, 0x00	; 0
     d96:	21 e7       	ldi	r18, 0x71	; 113
     d98:	32 e0       	ldi	r19, 0x02	; 2
     d9a:	62 9f       	mul	r22, r18
     d9c:	c0 01       	movw	r24, r0
     d9e:	63 9f       	mul	r22, r19
     da0:	90 0d       	add	r25, r0
     da2:	72 9f       	mul	r23, r18
     da4:	90 0d       	add	r25, r0
     da6:	11 24       	eor	r1, r1
     da8:	93 83       	std	Z+3, r25	; 0x03
     daa:	82 83       	std	Z+2, r24	; 0x02
     dac:	08 95       	ret

00000dae <power_monitor_init>:
uint8_t voltage_compensation = 0;

void power_monitor_init()
{
	/* Enable ADC */
	ADCSRA |= (1 << ADEN);
     dae:	37 9a       	sbi	0x06, 7	; 6
	/* ADC-1 */
	ADMUX = (1<<REFS1)|(1<<REFS0)|(1<<MUX0);
     db0:	81 ec       	ldi	r24, 0xC1	; 193
     db2:	87 b9       	out	0x07, r24	; 7
}
     db4:	08 95       	ret

00000db6 <power_monitor_get_voltage>:
	
	/* To start conversion write 1 to ADSC. It will be cleared by hardware when the conversion is completed. */
	/* Read ADCL at first. Once it is read ADC is blocked until ADCH is read. This is to ensure that a result of the same conversion is read */

	/* Start conversation */
	ADCSRA |=(1<<ADSC);
     db6:	36 9a       	sbi	0x06, 6	; 6
 
	/* Wait for some time (it takes about 18 ADC cycles */
	while ((ADCSRA &_BV(ADIF))==0x00) ;    
     db8:	34 9b       	sbis	0x06, 4	; 6
     dba:	fe cf       	rjmp	.-4      	; 0xdb8 <power_monitor_get_voltage+0x2>
 
	/* Read result */
	voltage = ADCL;
     dbc:	24 b1       	in	r18, 0x04	; 4
     dbe:	30 e0       	ldi	r19, 0x00	; 0
	voltage |= ADCH<<8;
     dc0:	45 b1       	in	r20, 0x05	; 5
     dc2:	94 2f       	mov	r25, r20
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	28 2b       	or	r18, r24
     dc8:	39 2b       	or	r19, r25
	
	// Skip the last two bits to digitally cancel noise
	//result &= 0xFFFC;
	
	/* Calculate voltage */
	return voltage + voltage_compensation;
     dca:	80 91 f3 00 	lds	r24, 0x00F3
     dce:	28 0f       	add	r18, r24
     dd0:	31 1d       	adc	r19, r1
}
     dd2:	82 2f       	mov	r24, r18
     dd4:	93 2f       	mov	r25, r19
     dd6:	08 95       	ret

00000dd8 <power_monitor_set_voltage_compensation>:

void power_monitor_set_voltage_compensation(uint8_t compensation)
{
	voltage_compensation = compensation;
     dd8:	80 93 f3 00 	sts	0x00F3, r24
     ddc:	08 95       	ret

00000dde <tach_states_set_state>:
		state_main_screen_state_exit,
		state_main_screen_state_event_handler},			
};

void tach_states_set_state(TACH_STATE_ID_T state_id)
{
     dde:	1f 93       	push	r17
     de0:	18 2f       	mov	r17, r24
	/* Check if appropriate state ID exists */
	if ((state_id <= TACH_STATE_NO_STATE) || (state_id >= TACH_STATE_STATE_MAX))
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	58 f5       	brcc	.+86     	; 0xe3c <tach_states_set_state+0x5e>
		return;
	
	/* If it is the same state - no need to exit and then re-init */
	if (state_id != s_current_state)
     de6:	e0 91 69 00 	lds	r30, 0x0069
     dea:	8e 17       	cp	r24, r30
     dec:	39 f1       	breq	.+78     	; 0xe3c <tach_states_set_state+0x5e>
	{
		/* Check whether we have an active state. Tear it down if necessary */
		if (TACH_STATE_NO_STATE != s_current_state)
     dee:	ef 3f       	cpi	r30, 0xFF	; 255
     df0:	89 f0       	breq	.+34     	; 0xe14 <tach_states_set_state+0x36>
		{
			s_states[s_current_state].state_exit(pCurrentStateBuf);
     df2:	ff 27       	eor	r31, r31
     df4:	e7 fd       	sbrc	r30, 7
     df6:	f0 95       	com	r31
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	ef 59       	subi	r30, 0x9F	; 159
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	04 80       	ldd	r0, Z+4	; 0x04
     e0a:	f5 81       	ldd	r31, Z+5	; 0x05
     e0c:	e0 2d       	mov	r30, r0
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	09 95       	icall
		}
	
		/* Init the new state */
		s_current_state = state_id;
     e14:	10 93 69 00 	sts	0x0069, r17
		s_states[s_current_state].state_enter(pCurrentStateBuf);
     e18:	e1 2f       	mov	r30, r17
     e1a:	ff 27       	eor	r31, r31
     e1c:	e7 fd       	sbrc	r30, 7
     e1e:	f0 95       	com	r31
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	ef 59       	subi	r30, 0x9F	; 159
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	02 80       	ldd	r0, Z+2	; 0x02
     e32:	f3 81       	ldd	r31, Z+3	; 0x03
     e34:	e0 2d       	mov	r30, r0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	09 95       	icall
	}
}
     e3c:	1f 91       	pop	r17
     e3e:	08 95       	ret

00000e40 <tach_states_go_to_next_state>:

void tach_states_go_to_next_state()
{
	
	
}
     e40:	08 95       	ret

00000e42 <tach_states_go_to_prev_state>:
	
void tach_states_go_to_prev_state()
{
	
}
     e42:	08 95       	ret

00000e44 <tach_states_dispatch_event>:

void tach_states_dispatch_event(uint8_t event, void *data)
{
	/* Check if any state is set */
	if (s_current_state == TACH_STATE_NO_STATE) 
     e44:	e0 91 69 00 	lds	r30, 0x0069
     e48:	ef 3f       	cpi	r30, 0xFF	; 255
     e4a:	79 f0       	breq	.+30     	; 0xe6a <tach_states_dispatch_event+0x26>
		return;
	
	/* Dispatch event to current state */
	s_states[s_current_state].state_event_handler(event, data);
     e4c:	ff 27       	eor	r31, r31
     e4e:	e7 fd       	sbrc	r30, 7
     e50:	f0 95       	com	r31
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	ef 59       	subi	r30, 0x9F	; 159
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	06 80       	ldd	r0, Z+6	; 0x06
     e64:	f7 81       	ldd	r31, Z+7	; 0x07
     e66:	e0 2d       	mov	r30, r0
     e68:	09 95       	icall
     e6a:	08 95       	ret

00000e6c <state_main_screen_state_enter>:
#include "power_monitor.h"

void state_main_screen_state_enter(void *pStateBuf)
{
	
}
     e6c:	08 95       	ret

00000e6e <state_main_screen_state_exit>:

void state_main_screen_state_exit(void *pStateBuf)
{
	
}
     e6e:	08 95       	ret

00000e70 <state_main_screen_state_event_handler>:


void state_main_screen_state_event_handler(uint8_t event, void *pStateBuf)
{	
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
	char *out_buf = NULL;
	uint16_t voltage = 0;
	
	switch (event)
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <state_main_screen_state_event_handler+0xe>
     e7c:	45 c0       	rjmp	.+138    	; 0xf08 <state_main_screen_state_event_handler+0x98>
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	20 f0       	brcs	.+8      	; 0xe8a <state_main_screen_state_event_handler+0x1a>
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	09 f0       	breq	.+2      	; 0xe88 <state_main_screen_state_event_handler+0x18>
     e86:	4d c0       	rjmp	.+154    	; 0xf22 <state_main_screen_state_event_handler+0xb2>
     e88:	46 c0       	rjmp	.+140    	; 0xf16 <state_main_screen_state_event_handler+0xa6>
	{
		case TACH_EVENT_REDRAW_SCREEN:
			voltage = power_monitor_get_voltage();
     e8a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <power_monitor_get_voltage>
     e8e:	ec 01       	movw	r28, r24
			out_buf = (char*) malloc(17);
     e90:	81 e1       	ldi	r24, 0x11	; 17
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 18 09 	call	0x1230	; 0x1230 <malloc>
     e98:	08 2f       	mov	r16, r24
     e9a:	19 2f       	mov	r17, r25
			snprintf(out_buf, 16, "%.2u.%.2uV                 ", voltage/66, voltage % 66);
     e9c:	8d b7       	in	r24, 0x3d	; 61
     e9e:	9e b7       	in	r25, 0x3e	; 62
     ea0:	0a 97       	sbiw	r24, 0x0a	; 10
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	9e bf       	out	0x3e, r25	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	8d bf       	out	0x3d, r24	; 61
     eac:	ed b7       	in	r30, 0x3d	; 61
     eae:	fe b7       	in	r31, 0x3e	; 62
     eb0:	31 96       	adiw	r30, 0x01	; 1
     eb2:	ad b7       	in	r26, 0x3d	; 61
     eb4:	be b7       	in	r27, 0x3e	; 62
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	0c 93       	st	X, r16
     eba:	11 83       	std	Z+1, r17	; 0x01
     ebc:	80 e1       	ldi	r24, 0x10	; 16
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	93 83       	std	Z+3, r25	; 0x03
     ec2:	82 83       	std	Z+2, r24	; 0x02
     ec4:	8a e6       	ldi	r24, 0x6A	; 106
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	95 83       	std	Z+5, r25	; 0x05
     eca:	84 83       	std	Z+4, r24	; 0x04
     ecc:	ce 01       	movw	r24, r28
     ece:	62 e4       	ldi	r22, 0x42	; 66
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	0e 94 04 09 	call	0x1208	; 0x1208 <__udivmodhi4>
     ed6:	77 83       	std	Z+7, r23	; 0x07
     ed8:	66 83       	std	Z+6, r22	; 0x06
     eda:	91 87       	std	Z+9, r25	; 0x09
     edc:	80 87       	std	Z+8, r24	; 0x08
     ede:	0e 94 4b 0a 	call	0x1496	; 0x1496 <snprintf>
			displayPrintLine("REdRAW", out_buf);
     ee2:	8d b7       	in	r24, 0x3d	; 61
     ee4:	9e b7       	in	r25, 0x3e	; 62
     ee6:	0a 96       	adiw	r24, 0x0a	; 10
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	9e bf       	out	0x3e, r25	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	8d bf       	out	0x3d, r24	; 61
     ef2:	86 e8       	ldi	r24, 0x86	; 134
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	60 2f       	mov	r22, r16
     ef8:	71 2f       	mov	r23, r17
     efa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <displayPrintLine>
			free(out_buf);
     efe:	80 2f       	mov	r24, r16
     f00:	91 2f       	mov	r25, r17
     f02:	0e 94 b2 09 	call	0x1364	; 0x1364 <free>
			break;
     f06:	0d c0       	rjmp	.+26     	; 0xf22 <state_main_screen_state_event_handler+0xb2>
		case TACH_EVENT_ENCODER_RIGHT:
			displayPrintLine("ENCODER                 ", "RIGHT                 ");
     f08:	8d e8       	ldi	r24, 0x8D	; 141
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	66 ea       	ldi	r22, 0xA6	; 166
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	0e 94 da 01 	call	0x3b4	; 0x3b4 <displayPrintLine>
			break;
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <state_main_screen_state_event_handler+0xb2>
		case TACH_EVENT_ENCODER_LEFT:
			displayPrintLine("ENCODER                 ", "LEFT                 ");
     f16:	8d e8       	ldi	r24, 0x8D	; 141
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	6d eb       	ldi	r22, 0xBD	; 189
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <displayPrintLine>
			break;			
		default:
			break;				
	}	
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <main>:
uint32_t tach_pulse_count = 0;
uint32_t total_pulse_count = 0;
uint32_t RPM_3 = 0;

int main(void)
{
     f2c:	1f 93       	push	r17
	uint8_t redraw_cycle = 0; /* Used to count sleep cycles to redraw screen every 0,5 sec */
	
	power_monitor_init();
     f2e:	0e 94 d7 06 	call	0xdae	; 0xdae <power_monitor_init>
	power_monitor_set_voltage_compensation(VOLTAGE_COMPENSATION);
     f32:	86 e1       	ldi	r24, 0x16	; 22
     f34:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <power_monitor_set_voltage_compensation>
	
	encoder_monitor_init();
     f38:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <encoder_monitor_init>
	//ICR1 = sound_freq;
	//OCR1B = sound_freq / 2;
	
	/* NEVER PULL-UP PD7 as it is GND'ed */
	
	initDisplay();
     f3c:	0e 94 04 01 	call	0x208	; 0x208 <initDisplay>
	displayClear();
     f40:	0e 94 f5 00 	call	0x1ea	; 0x1ea <displayClear>
	display_set_backlight(DISPLAY_BACKLIGHT_ON);
     f44:	84 e6       	ldi	r24, 0x64	; 100
     f46:	0e 94 49 00 	call	0x92	; 0x92 <display_set_backlight>
	displayPrintLine("STARTING UP...", "Init: OK");
     f4a:	83 ed       	ldi	r24, 0xD3	; 211
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	62 ee       	ldi	r22, 0xE2	; 226
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 da 01 	call	0x3b4	; 0x3b4 <displayPrintLine>
	
	/* Initialize 1-wire bus */
//	pBus = 	one_wire_initialize_bus(ONE_WIRE_PORT_A, PA4);
	
	/* Show the main screen on start-up */
	tach_states_set_state(TACH_STATE_MAIN_SCREEN);
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 ef 06 	call	0xdde	; 0xdde <tach_states_set_state>

	sei();
     f5c:	78 94       	sei
uint32_t total_pulse_count = 0;
uint32_t RPM_3 = 0;

int main(void)
{
	uint8_t redraw_cycle = 0; /* Used to count sleep cycles to redraw screen every 0,5 sec */
     f5e:	10 e0       	ldi	r17, 0x00	; 0
    {		
		
		/* Main loop */
		
		/* Get current state to update screen every 0.5 sec */
		if (50 == redraw_cycle)
     f60:	12 33       	cpi	r17, 0x32	; 50
     f62:	39 f4       	brne	.+14     	; 0xf72 <main+0x46>
		{
			tach_states_dispatch_event(TACH_EVENT_REDRAW_SCREEN, NULL);	
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 22 07 	call	0xe44	; 0xe44 <tach_states_dispatch_event>
			redraw_cycle = 0;
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <main+0x48>
		} 
		else 
		{
			redraw_cycle++;
     f72:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		/* Check if any Encoder events happened */
		switch(encoder_monitor_get_last_action())
     f74:	0e 94 3f 02 	call	0x47e	; 0x47e <encoder_monitor_get_last_action>
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <main+0x56>
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	61 f4       	brne	.+24     	; 0xf98 <main+0x6c>
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <main+0x62>
		{
			case ENCODER_ACTION_RIGHT:
				tach_states_dispatch_event(TACH_EVENT_ENCODER_RIGHT , NULL);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0e 94 22 07 	call	0xe44	; 0xe44 <tach_states_dispatch_event>
				break;
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <main+0x6c>
			case ENCODER_ACTION_LEFT:
				tach_states_dispatch_event(TACH_EVENT_ENCODER_LEFT , NULL);
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	0e 94 22 07 	call	0xe44	; 0xe44 <tach_states_dispatch_event>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f98:	8f e3       	ldi	r24, 0x3F	; 63
     f9a:	9c e9       	ldi	r25, 0x9C	; 156
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <main+0x70>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <main+0x76>
     fa2:	00 00       	nop
     fa4:	dd cf       	rjmp	.-70     	; 0xf60 <main+0x34>

00000fa6 <start_timer0_tach>:

/* Timer0 is used to count Tach impulses */
void start_timer0_tach()
{
	/* WGM01=1 - Clear Timer on Compare mode; 1024 - prescaler */	
	TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS00);
     fa6:	8d e0       	ldi	r24, 0x0D	; 13
     fa8:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0xFF;
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0); /* Enable output compare match interrupt */
     fae:	89 b7       	in	r24, 0x39	; 57
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	89 bf       	out	0x39, r24	; 57
}
     fb4:	08 95       	ret

00000fb6 <stop_timer0_tach>:

void stop_timer0_tach()
{
	TIMSK &= ~(1 << OCIE0); 
     fb6:	89 b7       	in	r24, 0x39	; 57
     fb8:	8d 7f       	andi	r24, 0xFD	; 253
     fba:	89 bf       	out	0x39, r24	; 57
	TCCR0 = 0;		
     fbc:	13 be       	out	0x33, r1	; 51
}
     fbe:	08 95       	ret

00000fc0 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
	/* This is called 61 times a second, i.e. 61 Hz
	  * 16 000 000 (16Mhz sys clock) / 1024 (pre-scaler) / 256 (top) = 61 */

	timer_count++;	
     fea:	80 91 f4 00 	lds	r24, 0x00F4
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 93 f4 00 	sts	0x00F4, r24

	if (timer_count == 61)
     ff4:	8d 33       	cpi	r24, 0x3D	; 61
     ff6:	b1 f5       	brne	.+108    	; 0x1064 <__vector_10+0xa4>
	{
		RPM_3 = tach_pulse_count * 60;
     ff8:	e0 90 f5 00 	lds	r14, 0x00F5
     ffc:	f0 90 f6 00 	lds	r15, 0x00F6
    1000:	00 91 f7 00 	lds	r16, 0x00F7
    1004:	10 91 f8 00 	lds	r17, 0x00F8
    1008:	c8 01       	movw	r24, r16
    100a:	b7 01       	movw	r22, r14
    100c:	2c e3       	ldi	r18, 0x3C	; 60
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__mulsi3>
    1018:	60 93 fd 00 	sts	0x00FD, r22
    101c:	70 93 fe 00 	sts	0x00FE, r23
    1020:	80 93 ff 00 	sts	0x00FF, r24
    1024:	90 93 00 01 	sts	0x0100, r25
		total_pulse_count += tach_pulse_count;
    1028:	80 91 f9 00 	lds	r24, 0x00F9
    102c:	90 91 fa 00 	lds	r25, 0x00FA
    1030:	a0 91 fb 00 	lds	r26, 0x00FB
    1034:	b0 91 fc 00 	lds	r27, 0x00FC
    1038:	e8 0e       	add	r14, r24
    103a:	f9 1e       	adc	r15, r25
    103c:	0a 1f       	adc	r16, r26
    103e:	1b 1f       	adc	r17, r27
    1040:	e0 92 f9 00 	sts	0x00F9, r14
    1044:	f0 92 fa 00 	sts	0x00FA, r15
    1048:	00 93 fb 00 	sts	0x00FB, r16
    104c:	10 93 fc 00 	sts	0x00FC, r17
		tach_pulse_count = 0;
    1050:	10 92 f5 00 	sts	0x00F5, r1
    1054:	10 92 f6 00 	sts	0x00F6, r1
    1058:	10 92 f7 00 	sts	0x00F7, r1
    105c:	10 92 f8 00 	sts	0x00F8, r1
		timer_count = 0;		
    1060:	10 92 f4 00 	sts	0x00F4, r1
	}
}
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
	encoder_monitor_handle_timer_int();
    10b0:	0e 94 01 02 	call	0x402	; 0x402 <encoder_monitor_handle_timer_int>
}
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <__vector_1>:

ISR(INT0_vect)
{
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	8f 93       	push	r24
    10e2:	9f 93       	push	r25
    10e4:	af 93       	push	r26
    10e6:	bf 93       	push	r27
	tach_pulse_count++;	
    10e8:	80 91 f5 00 	lds	r24, 0x00F5
    10ec:	90 91 f6 00 	lds	r25, 0x00F6
    10f0:	a0 91 f7 00 	lds	r26, 0x00F7
    10f4:	b0 91 f8 00 	lds	r27, 0x00F8
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	a1 1d       	adc	r26, r1
    10fc:	b1 1d       	adc	r27, r1
    10fe:	80 93 f5 00 	sts	0x00F5, r24
    1102:	90 93 f6 00 	sts	0x00F6, r25
    1106:	a0 93 f7 00 	sts	0x00F7, r26
    110a:	b0 93 f8 00 	sts	0x00F8, r27
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__fixunssfsi>:
    1120:	33 d0       	rcall	.+102    	; 0x1188 <__fp_splitA>
    1122:	88 f0       	brcs	.+34     	; 0x1146 <__fixunssfsi+0x26>
    1124:	9f 57       	subi	r25, 0x7F	; 127
    1126:	90 f0       	brcs	.+36     	; 0x114c <__fixunssfsi+0x2c>
    1128:	b9 2f       	mov	r27, r25
    112a:	99 27       	eor	r25, r25
    112c:	b7 51       	subi	r27, 0x17	; 23
    112e:	a0 f0       	brcs	.+40     	; 0x1158 <__fixunssfsi+0x38>
    1130:	d1 f0       	breq	.+52     	; 0x1166 <__fixunssfsi+0x46>
    1132:	66 0f       	add	r22, r22
    1134:	77 1f       	adc	r23, r23
    1136:	88 1f       	adc	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	1a f0       	brmi	.+6      	; 0x1142 <__fixunssfsi+0x22>
    113c:	ba 95       	dec	r27
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__fixunssfsi+0x12>
    1140:	12 c0       	rjmp	.+36     	; 0x1166 <__fixunssfsi+0x46>
    1142:	b1 30       	cpi	r27, 0x01	; 1
    1144:	81 f0       	breq	.+32     	; 0x1166 <__fixunssfsi+0x46>
    1146:	3a d0       	rcall	.+116    	; 0x11bc <__fp_zero>
    1148:	b1 e0       	ldi	r27, 0x01	; 1
    114a:	08 95       	ret
    114c:	37 c0       	rjmp	.+110    	; 0x11bc <__fp_zero>
    114e:	67 2f       	mov	r22, r23
    1150:	78 2f       	mov	r23, r24
    1152:	88 27       	eor	r24, r24
    1154:	b8 5f       	subi	r27, 0xF8	; 248
    1156:	39 f0       	breq	.+14     	; 0x1166 <__fixunssfsi+0x46>
    1158:	b9 3f       	cpi	r27, 0xF9	; 249
    115a:	cc f3       	brlt	.-14     	; 0x114e <__fixunssfsi+0x2e>
    115c:	86 95       	lsr	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	b3 95       	inc	r27
    1164:	d9 f7       	brne	.-10     	; 0x115c <__fixunssfsi+0x3c>
    1166:	3e f4       	brtc	.+14     	; 0x1176 <__fixunssfsi+0x56>
    1168:	90 95       	com	r25
    116a:	80 95       	com	r24
    116c:	70 95       	com	r23
    116e:	61 95       	neg	r22
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	08 95       	ret

00001178 <__fp_split3>:
    1178:	57 fd       	sbrc	r21, 7
    117a:	90 58       	subi	r25, 0x80	; 128
    117c:	44 0f       	add	r20, r20
    117e:	55 1f       	adc	r21, r21
    1180:	59 f0       	breq	.+22     	; 0x1198 <__fp_splitA+0x10>
    1182:	5f 3f       	cpi	r21, 0xFF	; 255
    1184:	71 f0       	breq	.+28     	; 0x11a2 <__fp_splitA+0x1a>
    1186:	47 95       	ror	r20

00001188 <__fp_splitA>:
    1188:	88 0f       	add	r24, r24
    118a:	97 fb       	bst	r25, 7
    118c:	99 1f       	adc	r25, r25
    118e:	61 f0       	breq	.+24     	; 0x11a8 <__fp_splitA+0x20>
    1190:	9f 3f       	cpi	r25, 0xFF	; 255
    1192:	79 f0       	breq	.+30     	; 0x11b2 <__fp_splitA+0x2a>
    1194:	87 95       	ror	r24
    1196:	08 95       	ret
    1198:	12 16       	cp	r1, r18
    119a:	13 06       	cpc	r1, r19
    119c:	14 06       	cpc	r1, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	f2 cf       	rjmp	.-28     	; 0x1186 <__fp_split3+0xe>
    11a2:	46 95       	lsr	r20
    11a4:	f1 df       	rcall	.-30     	; 0x1188 <__fp_splitA>
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <__fp_splitA+0x30>
    11a8:	16 16       	cp	r1, r22
    11aa:	17 06       	cpc	r1, r23
    11ac:	18 06       	cpc	r1, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	f1 cf       	rjmp	.-30     	; 0x1194 <__fp_splitA+0xc>
    11b2:	86 95       	lsr	r24
    11b4:	71 05       	cpc	r23, r1
    11b6:	61 05       	cpc	r22, r1
    11b8:	08 94       	sec
    11ba:	08 95       	ret

000011bc <__fp_zero>:
    11bc:	e8 94       	clt

000011be <__fp_szero>:
    11be:	bb 27       	eor	r27, r27
    11c0:	66 27       	eor	r22, r22
    11c2:	77 27       	eor	r23, r23
    11c4:	cb 01       	movw	r24, r22
    11c6:	97 f9       	bld	r25, 7
    11c8:	08 95       	ret

000011ca <__mulsi3>:
    11ca:	62 9f       	mul	r22, r18
    11cc:	d0 01       	movw	r26, r0
    11ce:	73 9f       	mul	r23, r19
    11d0:	f0 01       	movw	r30, r0
    11d2:	82 9f       	mul	r24, r18
    11d4:	e0 0d       	add	r30, r0
    11d6:	f1 1d       	adc	r31, r1
    11d8:	64 9f       	mul	r22, r20
    11da:	e0 0d       	add	r30, r0
    11dc:	f1 1d       	adc	r31, r1
    11de:	92 9f       	mul	r25, r18
    11e0:	f0 0d       	add	r31, r0
    11e2:	83 9f       	mul	r24, r19
    11e4:	f0 0d       	add	r31, r0
    11e6:	74 9f       	mul	r23, r20
    11e8:	f0 0d       	add	r31, r0
    11ea:	65 9f       	mul	r22, r21
    11ec:	f0 0d       	add	r31, r0
    11ee:	99 27       	eor	r25, r25
    11f0:	72 9f       	mul	r23, r18
    11f2:	b0 0d       	add	r27, r0
    11f4:	e1 1d       	adc	r30, r1
    11f6:	f9 1f       	adc	r31, r25
    11f8:	63 9f       	mul	r22, r19
    11fa:	b0 0d       	add	r27, r0
    11fc:	e1 1d       	adc	r30, r1
    11fe:	f9 1f       	adc	r31, r25
    1200:	bd 01       	movw	r22, r26
    1202:	cf 01       	movw	r24, r30
    1204:	11 24       	eor	r1, r1
    1206:	08 95       	ret

00001208 <__udivmodhi4>:
    1208:	aa 1b       	sub	r26, r26
    120a:	bb 1b       	sub	r27, r27
    120c:	51 e1       	ldi	r21, 0x11	; 17
    120e:	07 c0       	rjmp	.+14     	; 0x121e <__udivmodhi4_ep>

00001210 <__udivmodhi4_loop>:
    1210:	aa 1f       	adc	r26, r26
    1212:	bb 1f       	adc	r27, r27
    1214:	a6 17       	cp	r26, r22
    1216:	b7 07       	cpc	r27, r23
    1218:	10 f0       	brcs	.+4      	; 0x121e <__udivmodhi4_ep>
    121a:	a6 1b       	sub	r26, r22
    121c:	b7 0b       	sbc	r27, r23

0000121e <__udivmodhi4_ep>:
    121e:	88 1f       	adc	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	5a 95       	dec	r21
    1224:	a9 f7       	brne	.-22     	; 0x1210 <__udivmodhi4_loop>
    1226:	80 95       	com	r24
    1228:	90 95       	com	r25
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	08 95       	ret

00001230 <malloc>:
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	91 05       	cpc	r25, r1
    1238:	10 f4       	brcc	.+4      	; 0x123e <malloc+0xe>
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	e0 91 03 01 	lds	r30, 0x0103
    1242:	f0 91 04 01 	lds	r31, 0x0104
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	26 c0       	rjmp	.+76     	; 0x129c <malloc+0x6c>
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	68 17       	cp	r22, r24
    1256:	79 07       	cpc	r23, r25
    1258:	e0 f0       	brcs	.+56     	; 0x1292 <malloc+0x62>
    125a:	68 17       	cp	r22, r24
    125c:	79 07       	cpc	r23, r25
    125e:	81 f4       	brne	.+32     	; 0x1280 <malloc+0x50>
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	21 15       	cp	r18, r1
    1266:	31 05       	cpc	r19, r1
    1268:	31 f0       	breq	.+12     	; 0x1276 <malloc+0x46>
    126a:	d9 01       	movw	r26, r18
    126c:	13 96       	adiw	r26, 0x03	; 3
    126e:	9c 93       	st	X, r25
    1270:	8e 93       	st	-X, r24
    1272:	12 97       	sbiw	r26, 0x02	; 2
    1274:	2b c0       	rjmp	.+86     	; 0x12cc <malloc+0x9c>
    1276:	90 93 04 01 	sts	0x0104, r25
    127a:	80 93 03 01 	sts	0x0103, r24
    127e:	26 c0       	rjmp	.+76     	; 0x12cc <malloc+0x9c>
    1280:	41 15       	cp	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	19 f0       	breq	.+6      	; 0x128c <malloc+0x5c>
    1286:	64 17       	cp	r22, r20
    1288:	75 07       	cpc	r23, r21
    128a:	18 f4       	brcc	.+6      	; 0x1292 <malloc+0x62>
    128c:	ab 01       	movw	r20, r22
    128e:	e9 01       	movw	r28, r18
    1290:	df 01       	movw	r26, r30
    1292:	9f 01       	movw	r18, r30
    1294:	72 81       	ldd	r23, Z+2	; 0x02
    1296:	63 81       	ldd	r22, Z+3	; 0x03
    1298:	e7 2f       	mov	r30, r23
    129a:	f6 2f       	mov	r31, r22
    129c:	30 97       	sbiw	r30, 0x00	; 0
    129e:	c1 f6       	brne	.-80     	; 0x1250 <malloc+0x20>
    12a0:	41 15       	cp	r20, r1
    12a2:	51 05       	cpc	r21, r1
    12a4:	01 f1       	breq	.+64     	; 0x12e6 <malloc+0xb6>
    12a6:	48 1b       	sub	r20, r24
    12a8:	59 0b       	sbc	r21, r25
    12aa:	44 30       	cpi	r20, 0x04	; 4
    12ac:	51 05       	cpc	r21, r1
    12ae:	80 f4       	brcc	.+32     	; 0x12d0 <malloc+0xa0>
    12b0:	12 96       	adiw	r26, 0x02	; 2
    12b2:	8d 91       	ld	r24, X+
    12b4:	9c 91       	ld	r25, X
    12b6:	13 97       	sbiw	r26, 0x03	; 3
    12b8:	20 97       	sbiw	r28, 0x00	; 0
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <malloc+0x92>
    12bc:	9b 83       	std	Y+3, r25	; 0x03
    12be:	8a 83       	std	Y+2, r24	; 0x02
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <malloc+0x9a>
    12c2:	90 93 04 01 	sts	0x0104, r25
    12c6:	80 93 03 01 	sts	0x0103, r24
    12ca:	fd 01       	movw	r30, r26
    12cc:	32 96       	adiw	r30, 0x02	; 2
    12ce:	46 c0       	rjmp	.+140    	; 0x135c <malloc+0x12c>
    12d0:	fd 01       	movw	r30, r26
    12d2:	e4 0f       	add	r30, r20
    12d4:	f5 1f       	adc	r31, r21
    12d6:	81 93       	st	Z+, r24
    12d8:	91 93       	st	Z+, r25
    12da:	42 50       	subi	r20, 0x02	; 2
    12dc:	50 40       	sbci	r21, 0x00	; 0
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	5c 93       	st	X, r21
    12e2:	4e 93       	st	-X, r20
    12e4:	3b c0       	rjmp	.+118    	; 0x135c <malloc+0x12c>
    12e6:	20 91 01 01 	lds	r18, 0x0101
    12ea:	30 91 02 01 	lds	r19, 0x0102
    12ee:	21 15       	cp	r18, r1
    12f0:	31 05       	cpc	r19, r1
    12f2:	41 f4       	brne	.+16     	; 0x1304 <malloc+0xd4>
    12f4:	20 91 ed 00 	lds	r18, 0x00ED
    12f8:	30 91 ee 00 	lds	r19, 0x00EE
    12fc:	30 93 02 01 	sts	0x0102, r19
    1300:	20 93 01 01 	sts	0x0101, r18
    1304:	20 91 ef 00 	lds	r18, 0x00EF
    1308:	30 91 f0 00 	lds	r19, 0x00F0
    130c:	21 15       	cp	r18, r1
    130e:	31 05       	cpc	r19, r1
    1310:	41 f4       	brne	.+16     	; 0x1322 <malloc+0xf2>
    1312:	2d b7       	in	r18, 0x3d	; 61
    1314:	3e b7       	in	r19, 0x3e	; 62
    1316:	40 91 eb 00 	lds	r20, 0x00EB
    131a:	50 91 ec 00 	lds	r21, 0x00EC
    131e:	24 1b       	sub	r18, r20
    1320:	35 0b       	sbc	r19, r21
    1322:	e0 91 01 01 	lds	r30, 0x0101
    1326:	f0 91 02 01 	lds	r31, 0x0102
    132a:	e2 17       	cp	r30, r18
    132c:	f3 07       	cpc	r31, r19
    132e:	a0 f4       	brcc	.+40     	; 0x1358 <malloc+0x128>
    1330:	2e 1b       	sub	r18, r30
    1332:	3f 0b       	sbc	r19, r31
    1334:	28 17       	cp	r18, r24
    1336:	39 07       	cpc	r19, r25
    1338:	78 f0       	brcs	.+30     	; 0x1358 <malloc+0x128>
    133a:	ac 01       	movw	r20, r24
    133c:	4e 5f       	subi	r20, 0xFE	; 254
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	24 17       	cp	r18, r20
    1342:	35 07       	cpc	r19, r21
    1344:	48 f0       	brcs	.+18     	; 0x1358 <malloc+0x128>
    1346:	4e 0f       	add	r20, r30
    1348:	5f 1f       	adc	r21, r31
    134a:	50 93 02 01 	sts	0x0102, r21
    134e:	40 93 01 01 	sts	0x0101, r20
    1352:	81 93       	st	Z+, r24
    1354:	91 93       	st	Z+, r25
    1356:	02 c0       	rjmp	.+4      	; 0x135c <malloc+0x12c>
    1358:	e0 e0       	ldi	r30, 0x00	; 0
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	cf 01       	movw	r24, r30
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <free>:
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	09 f4       	brne	.+2      	; 0x136e <free+0xa>
    136c:	91 c0       	rjmp	.+290    	; 0x1490 <free+0x12c>
    136e:	fc 01       	movw	r30, r24
    1370:	32 97       	sbiw	r30, 0x02	; 2
    1372:	13 82       	std	Z+3, r1	; 0x03
    1374:	12 82       	std	Z+2, r1	; 0x02
    1376:	60 91 03 01 	lds	r22, 0x0103
    137a:	70 91 04 01 	lds	r23, 0x0104
    137e:	61 15       	cp	r22, r1
    1380:	71 05       	cpc	r23, r1
    1382:	81 f4       	brne	.+32     	; 0x13a4 <free+0x40>
    1384:	20 81       	ld	r18, Z
    1386:	31 81       	ldd	r19, Z+1	; 0x01
    1388:	28 0f       	add	r18, r24
    138a:	39 1f       	adc	r19, r25
    138c:	80 91 01 01 	lds	r24, 0x0101
    1390:	90 91 02 01 	lds	r25, 0x0102
    1394:	82 17       	cp	r24, r18
    1396:	93 07       	cpc	r25, r19
    1398:	99 f5       	brne	.+102    	; 0x1400 <free+0x9c>
    139a:	f0 93 02 01 	sts	0x0102, r31
    139e:	e0 93 01 01 	sts	0x0101, r30
    13a2:	76 c0       	rjmp	.+236    	; 0x1490 <free+0x12c>
    13a4:	db 01       	movw	r26, r22
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <free+0x4c>
    13ac:	cd 01       	movw	r24, r26
    13ae:	d9 01       	movw	r26, r18
    13b0:	ae 17       	cp	r26, r30
    13b2:	bf 07       	cpc	r27, r31
    13b4:	48 f4       	brcc	.+18     	; 0x13c8 <free+0x64>
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	2d 91       	ld	r18, X+
    13ba:	3c 91       	ld	r19, X
    13bc:	13 97       	sbiw	r26, 0x03	; 3
    13be:	21 15       	cp	r18, r1
    13c0:	31 05       	cpc	r19, r1
    13c2:	a1 f7       	brne	.-24     	; 0x13ac <free+0x48>
    13c4:	cd 01       	movw	r24, r26
    13c6:	21 c0       	rjmp	.+66     	; 0x140a <free+0xa6>
    13c8:	b3 83       	std	Z+3, r27	; 0x03
    13ca:	a2 83       	std	Z+2, r26	; 0x02
    13cc:	ef 01       	movw	r28, r30
    13ce:	49 91       	ld	r20, Y+
    13d0:	59 91       	ld	r21, Y+
    13d2:	9e 01       	movw	r18, r28
    13d4:	24 0f       	add	r18, r20
    13d6:	35 1f       	adc	r19, r21
    13d8:	a2 17       	cp	r26, r18
    13da:	b3 07       	cpc	r27, r19
    13dc:	79 f4       	brne	.+30     	; 0x13fc <free+0x98>
    13de:	2d 91       	ld	r18, X+
    13e0:	3c 91       	ld	r19, X
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	24 0f       	add	r18, r20
    13e6:	35 1f       	adc	r19, r21
    13e8:	2e 5f       	subi	r18, 0xFE	; 254
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	31 83       	std	Z+1, r19	; 0x01
    13ee:	20 83       	st	Z, r18
    13f0:	12 96       	adiw	r26, 0x02	; 2
    13f2:	2d 91       	ld	r18, X+
    13f4:	3c 91       	ld	r19, X
    13f6:	13 97       	sbiw	r26, 0x03	; 3
    13f8:	33 83       	std	Z+3, r19	; 0x03
    13fa:	22 83       	std	Z+2, r18	; 0x02
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	29 f4       	brne	.+10     	; 0x140a <free+0xa6>
    1400:	f0 93 04 01 	sts	0x0104, r31
    1404:	e0 93 03 01 	sts	0x0103, r30
    1408:	43 c0       	rjmp	.+134    	; 0x1490 <free+0x12c>
    140a:	dc 01       	movw	r26, r24
    140c:	13 96       	adiw	r26, 0x03	; 3
    140e:	fc 93       	st	X, r31
    1410:	ee 93       	st	-X, r30
    1412:	12 97       	sbiw	r26, 0x02	; 2
    1414:	4d 91       	ld	r20, X+
    1416:	5d 91       	ld	r21, X+
    1418:	a4 0f       	add	r26, r20
    141a:	b5 1f       	adc	r27, r21
    141c:	ea 17       	cp	r30, r26
    141e:	fb 07       	cpc	r31, r27
    1420:	69 f4       	brne	.+26     	; 0x143c <free+0xd8>
    1422:	20 81       	ld	r18, Z
    1424:	31 81       	ldd	r19, Z+1	; 0x01
    1426:	24 0f       	add	r18, r20
    1428:	35 1f       	adc	r19, r21
    142a:	2e 5f       	subi	r18, 0xFE	; 254
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	ec 01       	movw	r28, r24
    1430:	39 83       	std	Y+1, r19	; 0x01
    1432:	28 83       	st	Y, r18
    1434:	22 81       	ldd	r18, Z+2	; 0x02
    1436:	33 81       	ldd	r19, Z+3	; 0x03
    1438:	3b 83       	std	Y+3, r19	; 0x03
    143a:	2a 83       	std	Y+2, r18	; 0x02
    143c:	e0 e0       	ldi	r30, 0x00	; 0
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <free+0xe2>
    1442:	fb 01       	movw	r30, r22
    1444:	bc 01       	movw	r22, r24
    1446:	db 01       	movw	r26, r22
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	8d 91       	ld	r24, X+
    144c:	9c 91       	ld	r25, X
    144e:	13 97       	sbiw	r26, 0x03	; 3
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	b9 f7       	brne	.-18     	; 0x1442 <free+0xde>
    1454:	9b 01       	movw	r18, r22
    1456:	2e 5f       	subi	r18, 0xFE	; 254
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	8d 91       	ld	r24, X+
    145c:	9c 91       	ld	r25, X
    145e:	11 97       	sbiw	r26, 0x01	; 1
    1460:	82 0f       	add	r24, r18
    1462:	93 1f       	adc	r25, r19
    1464:	40 91 01 01 	lds	r20, 0x0101
    1468:	50 91 02 01 	lds	r21, 0x0102
    146c:	48 17       	cp	r20, r24
    146e:	59 07       	cpc	r21, r25
    1470:	79 f4       	brne	.+30     	; 0x1490 <free+0x12c>
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	29 f4       	brne	.+10     	; 0x1480 <free+0x11c>
    1476:	10 92 04 01 	sts	0x0104, r1
    147a:	10 92 03 01 	sts	0x0103, r1
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <free+0x120>
    1480:	13 82       	std	Z+3, r1	; 0x03
    1482:	12 82       	std	Z+2, r1	; 0x02
    1484:	22 50       	subi	r18, 0x02	; 2
    1486:	30 40       	sbci	r19, 0x00	; 0
    1488:	30 93 02 01 	sts	0x0102, r19
    148c:	20 93 01 01 	sts	0x0101, r18
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <snprintf>:
    1496:	ae e0       	ldi	r26, 0x0E	; 14
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e1 e5       	ldi	r30, 0x51	; 81
    149c:	fa e0       	ldi	r31, 0x0A	; 10
    149e:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__prologue_saves__+0x1c>
    14a2:	0d 89       	ldd	r16, Y+21	; 0x15
    14a4:	1e 89       	ldd	r17, Y+22	; 0x16
    14a6:	8f 89       	ldd	r24, Y+23	; 0x17
    14a8:	98 8d       	ldd	r25, Y+24	; 0x18
    14aa:	26 e0       	ldi	r18, 0x06	; 6
    14ac:	2c 83       	std	Y+4, r18	; 0x04
    14ae:	1a 83       	std	Y+2, r17	; 0x02
    14b0:	09 83       	std	Y+1, r16	; 0x01
    14b2:	97 ff       	sbrs	r25, 7
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <snprintf+0x24>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e8       	ldi	r25, 0x80	; 128
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	9e 01       	movw	r18, r28
    14c2:	25 5e       	subi	r18, 0xE5	; 229
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	ce 01       	movw	r24, r28
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	69 8d       	ldd	r22, Y+25	; 0x19
    14cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ce:	a9 01       	movw	r20, r18
    14d0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <vfprintf>
    14d4:	4d 81       	ldd	r20, Y+5	; 0x05
    14d6:	5e 81       	ldd	r21, Y+6	; 0x06
    14d8:	57 fd       	sbrc	r21, 7
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <snprintf+0x5a>
    14dc:	2f 81       	ldd	r18, Y+7	; 0x07
    14de:	38 85       	ldd	r19, Y+8	; 0x08
    14e0:	42 17       	cp	r20, r18
    14e2:	53 07       	cpc	r21, r19
    14e4:	0c f4       	brge	.+2      	; 0x14e8 <snprintf+0x52>
    14e6:	9a 01       	movw	r18, r20
    14e8:	02 0f       	add	r16, r18
    14ea:	13 1f       	adc	r17, r19
    14ec:	f8 01       	movw	r30, r16
    14ee:	10 82       	st	Z, r1
    14f0:	2e 96       	adiw	r28, 0x0e	; 14
    14f2:	e4 e0       	ldi	r30, 0x04	; 4
    14f4:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__epilogue_restores__+0x1c>

000014f8 <vfprintf>:
    14f8:	ac e0       	ldi	r26, 0x0C	; 12
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e2 e8       	ldi	r30, 0x82	; 130
    14fe:	fa e0       	ldi	r31, 0x0A	; 10
    1500:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__prologue_saves__>
    1504:	6c 01       	movw	r12, r24
    1506:	1b 01       	movw	r2, r22
    1508:	8a 01       	movw	r16, r20
    150a:	fc 01       	movw	r30, r24
    150c:	17 82       	std	Z+7, r1	; 0x07
    150e:	16 82       	std	Z+6, r1	; 0x06
    1510:	83 81       	ldd	r24, Z+3	; 0x03
    1512:	81 ff       	sbrs	r24, 1
    1514:	d1 c1       	rjmp	.+930    	; 0x18b8 <vfprintf+0x3c0>
    1516:	2e 01       	movw	r4, r28
    1518:	08 94       	sec
    151a:	41 1c       	adc	r4, r1
    151c:	51 1c       	adc	r5, r1
    151e:	f6 01       	movw	r30, r12
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	f1 01       	movw	r30, r2
    1524:	93 fd       	sbrc	r25, 3
    1526:	85 91       	lpm	r24, Z+
    1528:	93 ff       	sbrs	r25, 3
    152a:	81 91       	ld	r24, Z+
    152c:	1f 01       	movw	r2, r30
    152e:	88 23       	and	r24, r24
    1530:	09 f4       	brne	.+2      	; 0x1534 <vfprintf+0x3c>
    1532:	be c1       	rjmp	.+892    	; 0x18b0 <vfprintf+0x3b8>
    1534:	85 32       	cpi	r24, 0x25	; 37
    1536:	39 f4       	brne	.+14     	; 0x1546 <vfprintf+0x4e>
    1538:	93 fd       	sbrc	r25, 3
    153a:	85 91       	lpm	r24, Z+
    153c:	93 ff       	sbrs	r25, 3
    153e:	81 91       	ld	r24, Z+
    1540:	1f 01       	movw	r2, r30
    1542:	85 32       	cpi	r24, 0x25	; 37
    1544:	29 f4       	brne	.+10     	; 0x1550 <vfprintf+0x58>
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	b6 01       	movw	r22, r12
    154a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    154e:	e7 cf       	rjmp	.-50     	; 0x151e <vfprintf+0x26>
    1550:	ee 24       	eor	r14, r14
    1552:	ff 24       	eor	r15, r15
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	20 32       	cpi	r18, 0x20	; 32
    1558:	b0 f4       	brcc	.+44     	; 0x1586 <vfprintf+0x8e>
    155a:	8b 32       	cpi	r24, 0x2B	; 43
    155c:	69 f0       	breq	.+26     	; 0x1578 <vfprintf+0x80>
    155e:	8c 32       	cpi	r24, 0x2C	; 44
    1560:	28 f4       	brcc	.+10     	; 0x156c <vfprintf+0x74>
    1562:	80 32       	cpi	r24, 0x20	; 32
    1564:	51 f0       	breq	.+20     	; 0x157a <vfprintf+0x82>
    1566:	83 32       	cpi	r24, 0x23	; 35
    1568:	71 f4       	brne	.+28     	; 0x1586 <vfprintf+0x8e>
    156a:	0b c0       	rjmp	.+22     	; 0x1582 <vfprintf+0x8a>
    156c:	8d 32       	cpi	r24, 0x2D	; 45
    156e:	39 f0       	breq	.+14     	; 0x157e <vfprintf+0x86>
    1570:	80 33       	cpi	r24, 0x30	; 48
    1572:	49 f4       	brne	.+18     	; 0x1586 <vfprintf+0x8e>
    1574:	21 60       	ori	r18, 0x01	; 1
    1576:	2c c0       	rjmp	.+88     	; 0x15d0 <vfprintf+0xd8>
    1578:	22 60       	ori	r18, 0x02	; 2
    157a:	24 60       	ori	r18, 0x04	; 4
    157c:	29 c0       	rjmp	.+82     	; 0x15d0 <vfprintf+0xd8>
    157e:	28 60       	ori	r18, 0x08	; 8
    1580:	27 c0       	rjmp	.+78     	; 0x15d0 <vfprintf+0xd8>
    1582:	20 61       	ori	r18, 0x10	; 16
    1584:	25 c0       	rjmp	.+74     	; 0x15d0 <vfprintf+0xd8>
    1586:	27 fd       	sbrc	r18, 7
    1588:	2c c0       	rjmp	.+88     	; 0x15e2 <vfprintf+0xea>
    158a:	38 2f       	mov	r19, r24
    158c:	30 53       	subi	r19, 0x30	; 48
    158e:	3a 30       	cpi	r19, 0x0A	; 10
    1590:	98 f4       	brcc	.+38     	; 0x15b8 <vfprintf+0xc0>
    1592:	26 ff       	sbrs	r18, 6
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <vfprintf+0xae>
    1596:	8e 2d       	mov	r24, r14
    1598:	88 0f       	add	r24, r24
    159a:	e8 2e       	mov	r14, r24
    159c:	ee 0c       	add	r14, r14
    159e:	ee 0c       	add	r14, r14
    15a0:	e8 0e       	add	r14, r24
    15a2:	e3 0e       	add	r14, r19
    15a4:	15 c0       	rjmp	.+42     	; 0x15d0 <vfprintf+0xd8>
    15a6:	8f 2d       	mov	r24, r15
    15a8:	88 0f       	add	r24, r24
    15aa:	f8 2e       	mov	r15, r24
    15ac:	ff 0c       	add	r15, r15
    15ae:	ff 0c       	add	r15, r15
    15b0:	f8 0e       	add	r15, r24
    15b2:	f3 0e       	add	r15, r19
    15b4:	20 62       	ori	r18, 0x20	; 32
    15b6:	0c c0       	rjmp	.+24     	; 0x15d0 <vfprintf+0xd8>
    15b8:	8e 32       	cpi	r24, 0x2E	; 46
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <vfprintf+0xcc>
    15bc:	26 fd       	sbrc	r18, 6
    15be:	78 c1       	rjmp	.+752    	; 0x18b0 <vfprintf+0x3b8>
    15c0:	20 64       	ori	r18, 0x40	; 64
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <vfprintf+0xd8>
    15c4:	8c 36       	cpi	r24, 0x6C	; 108
    15c6:	11 f4       	brne	.+4      	; 0x15cc <vfprintf+0xd4>
    15c8:	20 68       	ori	r18, 0x80	; 128
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <vfprintf+0xd8>
    15cc:	88 36       	cpi	r24, 0x68	; 104
    15ce:	49 f4       	brne	.+18     	; 0x15e2 <vfprintf+0xea>
    15d0:	f1 01       	movw	r30, r2
    15d2:	93 fd       	sbrc	r25, 3
    15d4:	85 91       	lpm	r24, Z+
    15d6:	93 ff       	sbrs	r25, 3
    15d8:	81 91       	ld	r24, Z+
    15da:	1f 01       	movw	r2, r30
    15dc:	88 23       	and	r24, r24
    15de:	09 f0       	breq	.+2      	; 0x15e2 <vfprintf+0xea>
    15e0:	ba cf       	rjmp	.-140    	; 0x1556 <vfprintf+0x5e>
    15e2:	98 2f       	mov	r25, r24
    15e4:	95 54       	subi	r25, 0x45	; 69
    15e6:	93 30       	cpi	r25, 0x03	; 3
    15e8:	18 f0       	brcs	.+6      	; 0x15f0 <vfprintf+0xf8>
    15ea:	90 52       	subi	r25, 0x20	; 32
    15ec:	93 30       	cpi	r25, 0x03	; 3
    15ee:	28 f4       	brcc	.+10     	; 0x15fa <vfprintf+0x102>
    15f0:	0c 5f       	subi	r16, 0xFC	; 252
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	ff e3       	ldi	r31, 0x3F	; 63
    15f6:	f9 83       	std	Y+1, r31	; 0x01
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <vfprintf+0x11c>
    15fa:	83 36       	cpi	r24, 0x63	; 99
    15fc:	31 f0       	breq	.+12     	; 0x160a <vfprintf+0x112>
    15fe:	83 37       	cpi	r24, 0x73	; 115
    1600:	71 f0       	breq	.+28     	; 0x161e <vfprintf+0x126>
    1602:	83 35       	cpi	r24, 0x53	; 83
    1604:	09 f0       	breq	.+2      	; 0x1608 <vfprintf+0x110>
    1606:	60 c0       	rjmp	.+192    	; 0x16c8 <vfprintf+0x1d0>
    1608:	22 c0       	rjmp	.+68     	; 0x164e <vfprintf+0x156>
    160a:	f8 01       	movw	r30, r16
    160c:	80 81       	ld	r24, Z
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	0e 5f       	subi	r16, 0xFE	; 254
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	42 01       	movw	r8, r4
    1616:	71 e0       	ldi	r23, 0x01	; 1
    1618:	a7 2e       	mov	r10, r23
    161a:	b1 2c       	mov	r11, r1
    161c:	16 c0       	rjmp	.+44     	; 0x164a <vfprintf+0x152>
    161e:	62 e0       	ldi	r22, 0x02	; 2
    1620:	66 2e       	mov	r6, r22
    1622:	71 2c       	mov	r7, r1
    1624:	60 0e       	add	r6, r16
    1626:	71 1e       	adc	r7, r17
    1628:	f8 01       	movw	r30, r16
    162a:	80 80       	ld	r8, Z
    162c:	91 80       	ldd	r9, Z+1	; 0x01
    162e:	26 ff       	sbrs	r18, 6
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <vfprintf+0x140>
    1632:	6e 2d       	mov	r22, r14
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <vfprintf+0x144>
    1638:	6f ef       	ldi	r22, 0xFF	; 255
    163a:	7f ef       	ldi	r23, 0xFF	; 255
    163c:	c4 01       	movw	r24, r8
    163e:	2c 87       	std	Y+12, r18	; 0x0c
    1640:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <strnlen>
    1644:	5c 01       	movw	r10, r24
    1646:	83 01       	movw	r16, r6
    1648:	2c 85       	ldd	r18, Y+12	; 0x0c
    164a:	2f 77       	andi	r18, 0x7F	; 127
    164c:	17 c0       	rjmp	.+46     	; 0x167c <vfprintf+0x184>
    164e:	52 e0       	ldi	r21, 0x02	; 2
    1650:	65 2e       	mov	r6, r21
    1652:	71 2c       	mov	r7, r1
    1654:	60 0e       	add	r6, r16
    1656:	71 1e       	adc	r7, r17
    1658:	f8 01       	movw	r30, r16
    165a:	80 80       	ld	r8, Z
    165c:	91 80       	ldd	r9, Z+1	; 0x01
    165e:	26 ff       	sbrs	r18, 6
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <vfprintf+0x170>
    1662:	6e 2d       	mov	r22, r14
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	02 c0       	rjmp	.+4      	; 0x166c <vfprintf+0x174>
    1668:	6f ef       	ldi	r22, 0xFF	; 255
    166a:	7f ef       	ldi	r23, 0xFF	; 255
    166c:	c4 01       	movw	r24, r8
    166e:	2c 87       	std	Y+12, r18	; 0x0c
    1670:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <strnlen_P>
    1674:	5c 01       	movw	r10, r24
    1676:	2c 85       	ldd	r18, Y+12	; 0x0c
    1678:	20 68       	ori	r18, 0x80	; 128
    167a:	83 01       	movw	r16, r6
    167c:	23 fd       	sbrc	r18, 3
    167e:	20 c0       	rjmp	.+64     	; 0x16c0 <vfprintf+0x1c8>
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <vfprintf+0x19a>
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	b6 01       	movw	r22, r12
    1688:	2c 87       	std	Y+12, r18	; 0x0c
    168a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    168e:	fa 94       	dec	r15
    1690:	2c 85       	ldd	r18, Y+12	; 0x0c
    1692:	8f 2d       	mov	r24, r15
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a8 16       	cp	r10, r24
    1698:	b9 06       	cpc	r11, r25
    169a:	98 f3       	brcs	.-26     	; 0x1682 <vfprintf+0x18a>
    169c:	11 c0       	rjmp	.+34     	; 0x16c0 <vfprintf+0x1c8>
    169e:	f4 01       	movw	r30, r8
    16a0:	27 fd       	sbrc	r18, 7
    16a2:	85 91       	lpm	r24, Z+
    16a4:	27 ff       	sbrs	r18, 7
    16a6:	81 91       	ld	r24, Z+
    16a8:	4f 01       	movw	r8, r30
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	b6 01       	movw	r22, r12
    16ae:	2c 87       	std	Y+12, r18	; 0x0c
    16b0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    16b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16b6:	f1 10       	cpse	r15, r1
    16b8:	fa 94       	dec	r15
    16ba:	08 94       	sec
    16bc:	a1 08       	sbc	r10, r1
    16be:	b1 08       	sbc	r11, r1
    16c0:	a1 14       	cp	r10, r1
    16c2:	b1 04       	cpc	r11, r1
    16c4:	61 f7       	brne	.-40     	; 0x169e <vfprintf+0x1a6>
    16c6:	f1 c0       	rjmp	.+482    	; 0x18aa <vfprintf+0x3b2>
    16c8:	84 36       	cpi	r24, 0x64	; 100
    16ca:	11 f0       	breq	.+4      	; 0x16d0 <vfprintf+0x1d8>
    16cc:	89 36       	cpi	r24, 0x69	; 105
    16ce:	49 f5       	brne	.+82     	; 0x1722 <vfprintf+0x22a>
    16d0:	27 ff       	sbrs	r18, 7
    16d2:	08 c0       	rjmp	.+16     	; 0x16e4 <vfprintf+0x1ec>
    16d4:	f8 01       	movw	r30, r16
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	0c 5f       	subi	r16, 0xFC	; 252
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <vfprintf+0x1fe>
    16e4:	f8 01       	movw	r30, r16
    16e6:	60 81       	ld	r22, Z
    16e8:	71 81       	ldd	r23, Z+1	; 0x01
    16ea:	88 27       	eor	r24, r24
    16ec:	77 fd       	sbrc	r23, 7
    16ee:	80 95       	com	r24
    16f0:	98 2f       	mov	r25, r24
    16f2:	0e 5f       	subi	r16, 0xFE	; 254
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	4f e6       	ldi	r20, 0x6F	; 111
    16f8:	b4 2e       	mov	r11, r20
    16fa:	b2 22       	and	r11, r18
    16fc:	97 ff       	sbrs	r25, 7
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <vfprintf+0x21a>
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	f0 e8       	ldi	r31, 0x80	; 128
    1710:	bf 2a       	or	r11, r31
    1712:	a2 01       	movw	r20, r4
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	0e 94 a5 0c 	call	0x194a	; 0x194a <__ultoa_invert>
    171c:	78 2e       	mov	r7, r24
    171e:	74 18       	sub	r7, r4
    1720:	45 c0       	rjmp	.+138    	; 0x17ac <vfprintf+0x2b4>
    1722:	85 37       	cpi	r24, 0x75	; 117
    1724:	31 f4       	brne	.+12     	; 0x1732 <vfprintf+0x23a>
    1726:	3f ee       	ldi	r19, 0xEF	; 239
    1728:	b3 2e       	mov	r11, r19
    172a:	b2 22       	and	r11, r18
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	25 c0       	rjmp	.+74     	; 0x177c <vfprintf+0x284>
    1732:	99 ef       	ldi	r25, 0xF9	; 249
    1734:	b9 2e       	mov	r11, r25
    1736:	b2 22       	and	r11, r18
    1738:	8f 36       	cpi	r24, 0x6F	; 111
    173a:	c1 f0       	breq	.+48     	; 0x176c <vfprintf+0x274>
    173c:	80 37       	cpi	r24, 0x70	; 112
    173e:	20 f4       	brcc	.+8      	; 0x1748 <vfprintf+0x250>
    1740:	88 35       	cpi	r24, 0x58	; 88
    1742:	09 f0       	breq	.+2      	; 0x1746 <vfprintf+0x24e>
    1744:	b5 c0       	rjmp	.+362    	; 0x18b0 <vfprintf+0x3b8>
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <vfprintf+0x26a>
    1748:	80 37       	cpi	r24, 0x70	; 112
    174a:	21 f0       	breq	.+8      	; 0x1754 <vfprintf+0x25c>
    174c:	88 37       	cpi	r24, 0x78	; 120
    174e:	09 f0       	breq	.+2      	; 0x1752 <vfprintf+0x25a>
    1750:	af c0       	rjmp	.+350    	; 0x18b0 <vfprintf+0x3b8>
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x260>
    1754:	20 e1       	ldi	r18, 0x10	; 16
    1756:	b2 2a       	or	r11, r18
    1758:	b4 fe       	sbrs	r11, 4
    175a:	0b c0       	rjmp	.+22     	; 0x1772 <vfprintf+0x27a>
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	b8 2a       	or	r11, r24
    1760:	08 c0       	rjmp	.+16     	; 0x1772 <vfprintf+0x27a>
    1762:	b4 fe       	sbrs	r11, 4
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <vfprintf+0x280>
    1766:	e6 e0       	ldi	r30, 0x06	; 6
    1768:	be 2a       	or	r11, r30
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x280>
    176c:	28 e0       	ldi	r18, 0x08	; 8
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	05 c0       	rjmp	.+10     	; 0x177c <vfprintf+0x284>
    1772:	20 e1       	ldi	r18, 0x10	; 16
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x284>
    1778:	20 e1       	ldi	r18, 0x10	; 16
    177a:	32 e0       	ldi	r19, 0x02	; 2
    177c:	b7 fe       	sbrs	r11, 7
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <vfprintf+0x298>
    1780:	f8 01       	movw	r30, r16
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	0c 5f       	subi	r16, 0xFC	; 252
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	07 c0       	rjmp	.+14     	; 0x179e <vfprintf+0x2a6>
    1790:	f8 01       	movw	r30, r16
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 5f       	subi	r16, 0xFE	; 254
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	a2 01       	movw	r20, r4
    17a0:	0e 94 a5 0c 	call	0x194a	; 0x194a <__ultoa_invert>
    17a4:	78 2e       	mov	r7, r24
    17a6:	74 18       	sub	r7, r4
    17a8:	ff e7       	ldi	r31, 0x7F	; 127
    17aa:	bf 22       	and	r11, r31
    17ac:	b6 fe       	sbrs	r11, 6
    17ae:	0b c0       	rjmp	.+22     	; 0x17c6 <vfprintf+0x2ce>
    17b0:	2e ef       	ldi	r18, 0xFE	; 254
    17b2:	b2 22       	and	r11, r18
    17b4:	7e 14       	cp	r7, r14
    17b6:	38 f4       	brcc	.+14     	; 0x17c6 <vfprintf+0x2ce>
    17b8:	b4 fe       	sbrs	r11, 4
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <vfprintf+0x2d2>
    17bc:	b2 fc       	sbrc	r11, 2
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <vfprintf+0x2d2>
    17c0:	8f ee       	ldi	r24, 0xEF	; 239
    17c2:	b8 22       	and	r11, r24
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <vfprintf+0x2d2>
    17c6:	a7 2c       	mov	r10, r7
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <vfprintf+0x2d4>
    17ca:	ae 2c       	mov	r10, r14
    17cc:	8b 2d       	mov	r24, r11
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	b4 fe       	sbrs	r11, 4
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x2f6>
    17d4:	fe 01       	movw	r30, r28
    17d6:	e7 0d       	add	r30, r7
    17d8:	f1 1d       	adc	r31, r1
    17da:	20 81       	ld	r18, Z
    17dc:	20 33       	cpi	r18, 0x30	; 48
    17de:	19 f4       	brne	.+6      	; 0x17e6 <vfprintf+0x2ee>
    17e0:	e9 ee       	ldi	r30, 0xE9	; 233
    17e2:	be 22       	and	r11, r30
    17e4:	09 c0       	rjmp	.+18     	; 0x17f8 <vfprintf+0x300>
    17e6:	a3 94       	inc	r10
    17e8:	b2 fe       	sbrs	r11, 2
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <vfprintf+0x300>
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <vfprintf+0x2fe>
    17ee:	86 78       	andi	r24, 0x86	; 134
    17f0:	90 70       	andi	r25, 0x00	; 0
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <vfprintf+0x300>
    17f6:	a3 94       	inc	r10
    17f8:	8b 2c       	mov	r8, r11
    17fa:	99 24       	eor	r9, r9
    17fc:	b3 fc       	sbrc	r11, 3
    17fe:	14 c0       	rjmp	.+40     	; 0x1828 <vfprintf+0x330>
    1800:	b0 fe       	sbrs	r11, 0
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <vfprintf+0x32a>
    1804:	af 14       	cp	r10, r15
    1806:	28 f4       	brcc	.+10     	; 0x1812 <vfprintf+0x31a>
    1808:	e7 2c       	mov	r14, r7
    180a:	ef 0c       	add	r14, r15
    180c:	ea 18       	sub	r14, r10
    180e:	af 2c       	mov	r10, r15
    1810:	08 c0       	rjmp	.+16     	; 0x1822 <vfprintf+0x32a>
    1812:	e7 2c       	mov	r14, r7
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <vfprintf+0x32a>
    1816:	80 e2       	ldi	r24, 0x20	; 32
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	b6 01       	movw	r22, r12
    181c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1820:	a3 94       	inc	r10
    1822:	af 14       	cp	r10, r15
    1824:	c0 f3       	brcs	.-16     	; 0x1816 <vfprintf+0x31e>
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <vfprintf+0x338>
    1828:	af 14       	cp	r10, r15
    182a:	10 f4       	brcc	.+4      	; 0x1830 <vfprintf+0x338>
    182c:	fa 18       	sub	r15, r10
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <vfprintf+0x33a>
    1830:	ff 24       	eor	r15, r15
    1832:	84 fe       	sbrs	r8, 4
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <vfprintf+0x35c>
    1836:	80 e3       	ldi	r24, 0x30	; 48
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	b6 01       	movw	r22, r12
    183c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1840:	82 fe       	sbrs	r8, 2
    1842:	1f c0       	rjmp	.+62     	; 0x1882 <vfprintf+0x38a>
    1844:	81 fe       	sbrs	r8, 1
    1846:	03 c0       	rjmp	.+6      	; 0x184e <vfprintf+0x356>
    1848:	88 e5       	ldi	r24, 0x58	; 88
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	10 c0       	rjmp	.+32     	; 0x186e <vfprintf+0x376>
    184e:	88 e7       	ldi	r24, 0x78	; 120
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0d c0       	rjmp	.+26     	; 0x186e <vfprintf+0x376>
    1854:	c4 01       	movw	r24, r8
    1856:	86 78       	andi	r24, 0x86	; 134
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	91 f0       	breq	.+36     	; 0x1882 <vfprintf+0x38a>
    185e:	81 fc       	sbrc	r8, 1
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x36e>
    1862:	80 e2       	ldi	r24, 0x20	; 32
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <vfprintf+0x370>
    1866:	8b e2       	ldi	r24, 0x2B	; 43
    1868:	b7 fc       	sbrc	r11, 7
    186a:	8d e2       	ldi	r24, 0x2D	; 45
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	b6 01       	movw	r22, r12
    1870:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <vfprintf+0x38a>
    1876:	80 e3       	ldi	r24, 0x30	; 48
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	b6 01       	movw	r22, r12
    187c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1880:	ea 94       	dec	r14
    1882:	7e 14       	cp	r7, r14
    1884:	c0 f3       	brcs	.-16     	; 0x1876 <vfprintf+0x37e>
    1886:	7a 94       	dec	r7
    1888:	f2 01       	movw	r30, r4
    188a:	e7 0d       	add	r30, r7
    188c:	f1 1d       	adc	r31, r1
    188e:	80 81       	ld	r24, Z
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	b6 01       	movw	r22, r12
    1894:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1898:	77 20       	and	r7, r7
    189a:	a9 f7       	brne	.-22     	; 0x1886 <vfprintf+0x38e>
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x3b2>
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	b6 01       	movw	r22, r12
    18a4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    18a8:	fa 94       	dec	r15
    18aa:	ff 20       	and	r15, r15
    18ac:	c1 f7       	brne	.-16     	; 0x189e <vfprintf+0x3a6>
    18ae:	37 ce       	rjmp	.-914    	; 0x151e <vfprintf+0x26>
    18b0:	f6 01       	movw	r30, r12
    18b2:	26 81       	ldd	r18, Z+6	; 0x06
    18b4:	37 81       	ldd	r19, Z+7	; 0x07
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x3c4>
    18b8:	2f ef       	ldi	r18, 0xFF	; 255
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	c9 01       	movw	r24, r18
    18be:	2c 96       	adiw	r28, 0x0c	; 12
    18c0:	e2 e1       	ldi	r30, 0x12	; 18
    18c2:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__epilogue_restores__>

000018c6 <strnlen_P>:
    18c6:	fc 01       	movw	r30, r24
    18c8:	05 90       	lpm	r0, Z+
    18ca:	61 50       	subi	r22, 0x01	; 1
    18cc:	70 40       	sbci	r23, 0x00	; 0
    18ce:	01 10       	cpse	r0, r1
    18d0:	d8 f7       	brcc	.-10     	; 0x18c8 <strnlen_P+0x2>
    18d2:	80 95       	com	r24
    18d4:	90 95       	com	r25
    18d6:	8e 0f       	add	r24, r30
    18d8:	9f 1f       	adc	r25, r31
    18da:	08 95       	ret

000018dc <strnlen>:
    18dc:	fc 01       	movw	r30, r24
    18de:	61 50       	subi	r22, 0x01	; 1
    18e0:	70 40       	sbci	r23, 0x00	; 0
    18e2:	01 90       	ld	r0, Z+
    18e4:	01 10       	cpse	r0, r1
    18e6:	d8 f7       	brcc	.-10     	; 0x18de <strnlen+0x2>
    18e8:	80 95       	com	r24
    18ea:	90 95       	com	r25
    18ec:	8e 0f       	add	r24, r30
    18ee:	9f 1f       	adc	r25, r31
    18f0:	08 95       	ret

000018f2 <fputc>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	8c 01       	movw	r16, r24
    18fc:	eb 01       	movw	r28, r22
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	81 ff       	sbrs	r24, 1
    1902:	1b c0       	rjmp	.+54     	; 0x193a <fputc+0x48>
    1904:	82 ff       	sbrs	r24, 2
    1906:	0d c0       	rjmp	.+26     	; 0x1922 <fputc+0x30>
    1908:	2e 81       	ldd	r18, Y+6	; 0x06
    190a:	3f 81       	ldd	r19, Y+7	; 0x07
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	28 17       	cp	r18, r24
    1912:	39 07       	cpc	r19, r25
    1914:	64 f4       	brge	.+24     	; 0x192e <fputc+0x3c>
    1916:	e8 81       	ld	r30, Y
    1918:	f9 81       	ldd	r31, Y+1	; 0x01
    191a:	01 93       	st	Z+, r16
    191c:	f9 83       	std	Y+1, r31	; 0x01
    191e:	e8 83       	st	Y, r30
    1920:	06 c0       	rjmp	.+12     	; 0x192e <fputc+0x3c>
    1922:	e8 85       	ldd	r30, Y+8	; 0x08
    1924:	f9 85       	ldd	r31, Y+9	; 0x09
    1926:	80 2f       	mov	r24, r16
    1928:	09 95       	icall
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	31 f4       	brne	.+12     	; 0x193a <fputc+0x48>
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	9f 81       	ldd	r25, Y+7	; 0x07
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	9f 83       	std	Y+7, r25	; 0x07
    1936:	8e 83       	std	Y+6, r24	; 0x06
    1938:	02 c0       	rjmp	.+4      	; 0x193e <fputc+0x4c>
    193a:	0f ef       	ldi	r16, 0xFF	; 255
    193c:	1f ef       	ldi	r17, 0xFF	; 255
    193e:	c8 01       	movw	r24, r16
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <__ultoa_invert>:
    194a:	fa 01       	movw	r30, r20
    194c:	aa 27       	eor	r26, r26
    194e:	28 30       	cpi	r18, 0x08	; 8
    1950:	51 f1       	breq	.+84     	; 0x19a6 <__ultoa_invert+0x5c>
    1952:	20 31       	cpi	r18, 0x10	; 16
    1954:	81 f1       	breq	.+96     	; 0x19b6 <__ultoa_invert+0x6c>
    1956:	e8 94       	clt
    1958:	6f 93       	push	r22
    195a:	6e 7f       	andi	r22, 0xFE	; 254
    195c:	6e 5f       	subi	r22, 0xFE	; 254
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	af 4f       	sbci	r26, 0xFF	; 255
    1966:	b1 e0       	ldi	r27, 0x01	; 1
    1968:	3e d0       	rcall	.+124    	; 0x19e6 <__ultoa_invert+0x9c>
    196a:	b4 e0       	ldi	r27, 0x04	; 4
    196c:	3c d0       	rcall	.+120    	; 0x19e6 <__ultoa_invert+0x9c>
    196e:	67 0f       	add	r22, r23
    1970:	78 1f       	adc	r23, r24
    1972:	89 1f       	adc	r24, r25
    1974:	9a 1f       	adc	r25, r26
    1976:	a1 1d       	adc	r26, r1
    1978:	68 0f       	add	r22, r24
    197a:	79 1f       	adc	r23, r25
    197c:	8a 1f       	adc	r24, r26
    197e:	91 1d       	adc	r25, r1
    1980:	a1 1d       	adc	r26, r1
    1982:	6a 0f       	add	r22, r26
    1984:	71 1d       	adc	r23, r1
    1986:	81 1d       	adc	r24, r1
    1988:	91 1d       	adc	r25, r1
    198a:	a1 1d       	adc	r26, r1
    198c:	20 d0       	rcall	.+64     	; 0x19ce <__ultoa_invert+0x84>
    198e:	09 f4       	brne	.+2      	; 0x1992 <__ultoa_invert+0x48>
    1990:	68 94       	set
    1992:	3f 91       	pop	r19
    1994:	2a e0       	ldi	r18, 0x0A	; 10
    1996:	26 9f       	mul	r18, r22
    1998:	11 24       	eor	r1, r1
    199a:	30 19       	sub	r19, r0
    199c:	30 5d       	subi	r19, 0xD0	; 208
    199e:	31 93       	st	Z+, r19
    19a0:	de f6       	brtc	.-74     	; 0x1958 <__ultoa_invert+0xe>
    19a2:	cf 01       	movw	r24, r30
    19a4:	08 95       	ret
    19a6:	46 2f       	mov	r20, r22
    19a8:	47 70       	andi	r20, 0x07	; 7
    19aa:	40 5d       	subi	r20, 0xD0	; 208
    19ac:	41 93       	st	Z+, r20
    19ae:	b3 e0       	ldi	r27, 0x03	; 3
    19b0:	0f d0       	rcall	.+30     	; 0x19d0 <__ultoa_invert+0x86>
    19b2:	c9 f7       	brne	.-14     	; 0x19a6 <__ultoa_invert+0x5c>
    19b4:	f6 cf       	rjmp	.-20     	; 0x19a2 <__ultoa_invert+0x58>
    19b6:	46 2f       	mov	r20, r22
    19b8:	4f 70       	andi	r20, 0x0F	; 15
    19ba:	40 5d       	subi	r20, 0xD0	; 208
    19bc:	4a 33       	cpi	r20, 0x3A	; 58
    19be:	18 f0       	brcs	.+6      	; 0x19c6 <__ultoa_invert+0x7c>
    19c0:	49 5d       	subi	r20, 0xD9	; 217
    19c2:	31 fd       	sbrc	r19, 1
    19c4:	40 52       	subi	r20, 0x20	; 32
    19c6:	41 93       	st	Z+, r20
    19c8:	02 d0       	rcall	.+4      	; 0x19ce <__ultoa_invert+0x84>
    19ca:	a9 f7       	brne	.-22     	; 0x19b6 <__ultoa_invert+0x6c>
    19cc:	ea cf       	rjmp	.-44     	; 0x19a2 <__ultoa_invert+0x58>
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	a6 95       	lsr	r26
    19d2:	97 95       	ror	r25
    19d4:	87 95       	ror	r24
    19d6:	77 95       	ror	r23
    19d8:	67 95       	ror	r22
    19da:	ba 95       	dec	r27
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__ultoa_invert+0x86>
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 05       	cpc	r22, r1
    19e2:	71 05       	cpc	r23, r1
    19e4:	08 95       	ret
    19e6:	9b 01       	movw	r18, r22
    19e8:	ac 01       	movw	r20, r24
    19ea:	0a 2e       	mov	r0, r26
    19ec:	06 94       	lsr	r0
    19ee:	57 95       	ror	r21
    19f0:	47 95       	ror	r20
    19f2:	37 95       	ror	r19
    19f4:	27 95       	ror	r18
    19f6:	ba 95       	dec	r27
    19f8:	c9 f7       	brne	.-14     	; 0x19ec <__ultoa_invert+0xa2>
    19fa:	62 0f       	add	r22, r18
    19fc:	73 1f       	adc	r23, r19
    19fe:	84 1f       	adc	r24, r20
    1a00:	95 1f       	adc	r25, r21
    1a02:	a0 1d       	adc	r26, r0
    1a04:	08 95       	ret

00001a06 <__prologue_saves__>:
    1a06:	2f 92       	push	r2
    1a08:	3f 92       	push	r3
    1a0a:	4f 92       	push	r4
    1a0c:	5f 92       	push	r5
    1a0e:	6f 92       	push	r6
    1a10:	7f 92       	push	r7
    1a12:	8f 92       	push	r8
    1a14:	9f 92       	push	r9
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	ca 1b       	sub	r28, r26
    1a30:	db 0b       	sbc	r29, r27
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	09 94       	ijmp

00001a3e <__epilogue_restores__>:
    1a3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1a40:	39 88       	ldd	r3, Y+17	; 0x11
    1a42:	48 88       	ldd	r4, Y+16	; 0x10
    1a44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a50:	b9 84       	ldd	r11, Y+9	; 0x09
    1a52:	c8 84       	ldd	r12, Y+8	; 0x08
    1a54:	df 80       	ldd	r13, Y+7	; 0x07
    1a56:	ee 80       	ldd	r14, Y+6	; 0x06
    1a58:	fd 80       	ldd	r15, Y+5	; 0x05
    1a5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1a5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a60:	b9 81       	ldd	r27, Y+1	; 0x01
    1a62:	ce 0f       	add	r28, r30
    1a64:	d1 1d       	adc	r29, r1
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	ed 01       	movw	r28, r26
    1a72:	08 95       	ret

00001a74 <_exit>:
    1a74:	f8 94       	cli

00001a76 <__stop_program>:
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <__stop_program>
